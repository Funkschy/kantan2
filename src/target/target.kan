import ":std/str";
import ":std/dbg";

extern def get_os(os: *Sys): void;

type Target struct {
    triple: str.View,
    ptr_width_bytes: usize,
    arch: Arch,
    vendor: Vendor,
    sys: Sys,
    abi: Abi
}

def default(): Target {
    let target: Target = undefined;

    target.sys = Sys.None;
    get_os(&target.sys);

    target.ptr_width_bytes = sizeof *void;
    target.arch = Arch.X86_64;
    target.insert_defaults_for_system();

    return target;
}

def (t: *Target) eq(other: *Target): bool {
    return t.arch == other.arch
        && t.vendor == other.vendor
        && t.sys == other.sys
        && t.abi == other.abi;
}

def (t: *Target) insert_defaults_for_system() {
    if t.sys == Sys.Linux {
        t.triple = str.view_from("x86_64-unknown-linux-sysv");
        t.vendor = Vendor.Unknown;
        t.abi = Abi.SysV;
    } else if t.sys == Sys.Darwin {
        t.vendor = Vendor.Apple;
        t.triple = str.view_from("x86_64-apple-darwin");
        t.abi = Abi.Unknown;
    } else if t.sys == Sys.Windows {
        t.vendor = Vendor.PC;
        t.triple = str.view_from("x86_64-pc-windows-msvc");
        t.abi = Abi.Msvc;
    }
}

type Arch enum {
    X86_64, Wasm32
}

type Vendor enum {
    Unknown, PC, Apple
}

// needs to be the same as the C enum in lib.c
type Sys enum {
    None,
    Unknown, // only for wasm
    Linux,
    Darwin,
    Windows
}

type Abi enum {
    Unknown, SysV, Msvc
}
