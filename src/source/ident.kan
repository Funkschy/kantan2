import "../std/str";
import "../std/libc";
import "../source/span";

type Ident struct {
    span: span.Span
}

def from_span(span: span.Span): Ident {
    return Ident { span: span };
}

def empty(): Ident {
    return from_span(span.empty());
}

def (i: *Ident) is_empty(): bool {
    return i.start() == null;
}

def (i: *Ident) start(): string {
    return i.span.start;
}

def (i: *Ident) len(): usize {
    return i.span.len();
}

def (i: Ident) equals(other: Ident): bool {
    return i.eq_value(&other);
}

def (i: *Ident) char_at(pos: usize): i8 {
    return *(i.span.start + pos);
}

def (id: *Ident) eq_lit(lit: string): bool {
    if id.is_empty() {
        return false;
    }

    let len = id.len();
    if len != libc.strlen(lit) {
        return false;
    }

    return libc.strncmp(id.start(), lit, len) == 0;
}

def (first: *Ident) eq_value(second: *Ident): bool {
    let first_len = first.len();
    if first_len != second.len() {
        return false;
    }

    return libc.memcmp(
        first.start() as *void, second.start() as *void, first_len
    ) == 0;
}

// -1 if not found
def (id: *Ident) index_of(c: i8): isize {
    let len = id.len();
    for let i: usize = 0; i < len; i += 1 {
        if id.char_at(i) == '.' {
            return i as isize;
        }
    }
    return -1;
}

// this does a strdup and needs to be freed
def (i: *Ident) to_string(): str.String {
    return str.from_l(i.start(), i.len());
}

def (i: *Ident) as_view(): str.View {
    return str.view(i.start(), i.len());
}
