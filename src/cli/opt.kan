import "io";

import "report";
import "parse" as p;

import ":std/str";
import ":std/vec";
import ":std/ptrvec";

type Options struct {
    had_errors: bool,
    exit_immediately: bool,
    print_help: bool,
    debug_info: bool,
    // output all errors and warnings in json
    output_json: bool,
    dump_ast: bool,
    dump_type_graph: bool,
    // quit after parsing
    parse_only: bool,
    files: ptrvec.Vec,
    opt_level: u8,
    output_filename: str.View,
    target_os: str.View,
    target_arch: str.View
}

let num_options: usize = 10;
let available_options: [10]p.Option = undefined;

def parse(argc: i32, argv: **i8): Options {
    let options = Options {
        had_errors: false,
        exit_immediately: false,
        print_help: false,
        debug_info: false,
        output_json: false,
        dump_ast: false,
        dump_type_graph: false,
        parse_only: false,
        files: ptrvec.with_cap(argc as usize),
        opt_level: 0,
        output_filename: str.view("", 0),
        target_os: str.view("", 0),
        target_arch: str.view("", 0)
    };

    // this is just here to fix a stupid compiler bug
    // TODO: remove this when the compiler bug is fixed
    let dummy: p.Value = undefined;

    let v = &str.view_from;
    let i = -1;
    available_options[i += 1] = *p.option(v("help"), p.val_bool(&options.print_help))
        .short(v("h"))
        .help(v("print this help text"));

    available_options[i += 1] = *p.option(v("debug-symbols"), p.val_bool(&options.debug_info))
        .short(v("g"))
        .help(v("enable debug symbols in the output"));

    available_options[i += 1] = *p.option(v("mi"), p.val_bool(&options.output_json))
        .help(v("enable the machine interface"))
        .remarks(v("output everything as json"));

    available_options[i += 1] = *p.option(v("dump-ast"), p.val_bool(&options.dump_ast))
        .help(v("dump the ast as json"));

    available_options[i += 1] = *p.option(v("dump-type-graph"), p.val_bool(&options.dump_type_graph))
        .help(v("dump the type-graph as json"));

    available_options[i += 1] = *p.option(v("parse-only"), p.val_bool(&options.parse_only))
        .help(v("quit after parsing"));

    available_options[i += 1] = *p.option(v("opt-level"), p.val_byte(&options.opt_level))
        .short(v("O"))
        .arg_name(v("level"))
        .help(v("the optimization level"))
        .allowed(v("0 1 2 3 "));

    available_options[i += 1] = *p.option(v("out"), p.val_view(&options.output_filename))
        .short(v("o"))
        .arg_name(v("file"))
        .help(v("the output file"))
        .remarks(v("end with .s/.o for assembly/obj-file output"));

    available_options[i += 1] = *p.option(v("sys"), p.val_view(&options.target_os))
        .help(v("set the target OS"))
        .allowed(v("linux win32 darwin "));

    available_options[i += 1] = *p.option(v("arch"), p.val_view(&options.target_arch))
        .help(v("set the target Architecture"))
        .allowed(v("x86_64 wasm32 "));

    let parser = p.parser(&available_options[0], num_options, &options.files);
    options.had_errors = parser.parse(argc, argv).is_error();
    options.had_errors = error_in_config_values(&options);
    options.exit_immediately = options.print_help;

    if options.print_help {
        print_usage();
    }

    return options;
}

def error_in_config_values(options: *Options): bool {
    if options.had_errors {
        return true;
    }

    if options.dump_ast && !options.output_json {
        report.print_simple(str.view("--dump-ast can only be used in combination with --mi", 52));
        return true;
    }

    if options.dump_type_graph && !options.output_json {
        report.print_simple(str.view("--dump-type-graph can only be used in combination with --mi", 52));
        return true;
    }

    return false;
}

def print_usage() {
    io.printf("kantan\nFelix Schoeller <felix.schoeller@protonmail.com>\n");
    io.printf("The official compiler for the Kantan programming language\n\n");
    io.printf("USAGE:\n");
    io.printf("    kantan [OPTIONS] <source-file>...\n\n");
    io.printf("OPTIONS:\n");

    let first_col = vec.with_cap(sizeof str.String, num_options);
    defer first_col.free();
    let second_col = vec.with_cap(sizeof str.View, num_options);
    defer second_col.free();
    let third_col = vec.with_cap(sizeof str.String, num_options);
    defer third_col.free();

    let longest_name: usize = 0;
    let longest_desc: usize = 0;
    for let i: usize = 0; i < num_options; i += 1 {
        let o = &available_options[i];

        let first = o.first_col();
        let second = o.second_col();
        let third = o.third_col();

        first_col.push(&first as *void);
        second_col.push(&second as *void);
        third_col.push(&third as *void);

        if first.len() > longest_name {
            longest_name = first.len();
        }
        if second.len > longest_desc {
            longest_desc = second.len;
        }
    }

    for let i: usize = 0; i < num_options; i += 1 {
        let first = first_col.get_ptr(i) as *str.String;
        let second = second_col.get_ptr(i) as *str.View;
        let third = third_col.get_ptr(i) as *str.String;

        io.printf("    %s", first.cstring());
        if second.len > 0 {
            let padding = longest_name + 1 - first.len();
            io.printf("%*s%.*s", padding, "", second.len, second.data);
        }

        if third.len() > 0 {
            let padding = longest_desc + 1 - second.len;
            io.printf("%*s%s", padding, "", third.cstring());
        }

        // print new line
        io.puts("");

        first.free();
        third.free();
    }

    io.printf("\n");
    io.printf("ARGS:\n");
    io.printf("    <source-file>...\n");
}
