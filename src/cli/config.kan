import "opt";

import ":std/ptrvec";
import ":std/libc";
import ":std/str";
import ":std/files/path";

import ":target/target";

type OutputKind enum {
    ASM, OBJ, EXE
}

type ErrorOutputFormat enum {
    HumanReadable, JSON
}

type Config struct {
    emit_debug_info: bool,
    invoke_linker: bool,
    quit_after_parsing: bool,
    output_kind: OutputKind,
    error_output_format: ErrorOutputFormat,
    opt_level: i8,
    output_file: path.Path,
    files: ptrvec.Vec,
    target: target.Target
}

def (c: *Config) free() {
    c.files.free();
}

def is_same_os_as_target(options: *opt.Options, config: *target.Target): bool {
    // no target information given => use defaults
    if options.target_os.len == 0 {
        return true;
    }

    return config.sys.as_view().eq(options.target_os);
}

def from_options(options: *opt.Options): Config {
    // the current system
    let target_conf = target.default();
    // do we compile for the current system
    let is_crosscompilation = !is_same_os_as_target(options, &target_conf);

    if is_crosscompilation {
        target_conf.sys = target.sys_from_view(options.target_os);
    }
    target_conf.insert_defaults_for_system();

    let out_name = options.output_filename;
    let kind = OutputKind.EXE;

    if out_name.len == 0 {
        out_name = str.view("a.out", 5);
    } else if out_name.drop(out_name.len - 2).eq(str.view(".s", 2)) {
        kind = OutputKind.ASM;
    } else if out_name.drop(out_name.len - 2).eq(str.view(".o", 2)) {
        kind = OutputKind.OBJ;
    }

    // we currently use the system linker, which ofc only works on the same system
    let invoke_linker = kind == OutputKind.EXE && !is_crosscompilation;

    let error_output_format = ErrorOutputFormat.HumanReadable;
    if options.output_json {
        error_output_format = ErrorOutputFormat.JSON;
    }

    return Config {
        emit_debug_info: options.debug_info,
        invoke_linker: invoke_linker,
        quit_after_parsing: options.parse_only,
        output_kind: kind,
        error_output_format: error_output_format,
        opt_level: options.opt_level,
        output_file: path.from_view(out_name),
        files: options.files,
        target: target_conf
    };
}

def push_bool(json: *str.String, b: bool) {
    if b {
        json.push(str.view("true", 4));
    } else {
        json.push(str.view("false", 5));
    }
}

def (c: *Config) to_json(): str.String {
    let json = str.from("{");
    defer json.push(str.view("}", 1));

    let output_kind: [3]str.View = undefined;
    output_kind[OutputKind.ASM as i32] = str.view("asm", 3);
    output_kind[OutputKind.OBJ as i32] = str.view("obj", 3);
    output_kind[OutputKind.EXE as i32] = str.view("exe", 3);

    let error_fmt: [2]str.View = undefined;
    error_fmt[ErrorOutputFormat.HumanReadable as i32] = str.view("text", 4);
    error_fmt[ErrorOutputFormat.JSON as i32] = str.view("json", 4);

    json.push(str.view_from("\"emit-debug-info\": "));
    push_bool(&json, c.emit_debug_info);
    json.push(str.view(",", 1));

    json.push(str.view_from("\"invoke-linker\": "));
    push_bool(&json, c.invoke_linker);
    json.push(str.view(",", 1));

    json.push(str.view_from("\"quit-after-parsing\": "));
    push_bool(&json, c.quit_after_parsing);
    json.push(str.view(",", 1));

    json.push(str.view_from("\"output-kind\": \""));
    json.push(output_kind[c.output_kind as i32]);
    json.push(str.view_from("\","));

    json.push(str.view_from("\"error-output-format\": \""));
    json.push(error_fmt[c.error_output_format as i32]);
    json.push(str.view_from("\","));

    json.push(str.view_from("\"optimization-level\": "));
    let opt_char = c.opt_level + '0';
    json.push(str.view(&opt_char, 1));
    json.push(str.view(",", 1));

    json.push(str.view_from("\"output-file\": \""));
    json.push(c.output_file.as_view());
    json.push(str.view_from("\","));

    json.push(str.view_from("\"target\": \""));
    let triple = c.target.to_triple();
    json.push(triple.view());
    triple.free();
    json.push(str.view_from("\""));

    return json;
}

