import "../std/dbg";
import "../std/libc";
import "../std/ptrvec";

let region_size: usize = 4096;
type Region struct {
    next: *Region,
    len: usize,
    data: [4096]u8
}

def region(): *Region {
    let region = libc.malloc(sizeof Region) as *Region;
    region.next = null;
    region.len = 0;
    return region;
}

type TypedArena struct {
    elem_size: usize,
    first: *Region,
    last: *Region
}

def typed(elem_size: usize): TypedArena {
    // this number is rather arbitrary, however an arena which cannot hold at least 8 items seems
    // kinda useless
    dbg.assert_fmt(elem_size * 8 < region_size, "arena cannot hold 8 items: %zu", elem_size * 8);

    let first = region();

    return TypedArena {
        elem_size: elem_size,
        first: first,
        last: first
    };
}

def (a: *TypedArena) alloc(): *void {
    if a.last.len + a.elem_size > region_size {
        let new_region = region();
        a.last.next = new_region;
        a.last = new_region;
    }

    let ptr = &a.last.data[0] + a.last.len;
    a.last.len += a.elem_size;
    return ptr as *void;
}

def (a: *TypedArena) free() {
    let region = a.first;
    while region != null {
        let next = region.next;
        delete region;
        region = next;
    }
}
