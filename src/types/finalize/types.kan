import ":util" as _;
import ":error" as e;

import ":source/span";

import "../util";
import "../ctx" as c;
import "../types" as _;

def move(ctx: *c.TyCtx, ty: *Type): *Type {
    let memory = ctx.alloc_final_ty();
    // copy the type over
    *memory = *ty;
    ty.kind = TypeKind.Moved;
    ty.data.new_location = memory;
    return memory;
}

// TODO(#42): also add error checks like the scope close
def finalize(ctx: *c.TyCtx, p: **Type, declared_at: span.Span): Result {
    let ty = *p;

    if ty.kind == TypeKind.Error {
        return Result.Error;
    }

    if ty.kind == TypeKind.Moved {
        *p = ty.data.new_location;
        return Result.OK;
    }

    if ty.kind == TypeKind.Variable {
        // this prevents loops in the types from producing a stack overflow. Instead a loop will
        // just be reported as a non inferable type
        ty.kind = TypeKind.Any;

        let result = finalize(ctx, &ty.data.inner, declared_at);
        if result.is_error() {
            return result;
        }

        *p = ty.data.inner;
        ty.kind = TypeKind.Moved;
        ty.data.new_location = ty.data.inner;
        return result;
    }

    if ty.is_const_size_indirect_type() {
        let result = finalize(ctx, &ty.data.ptr_or_slice_to, declared_at);
        *p = move(ctx, ty);
        return result;
    }

    if ty.kind == TypeKind.AnyInt {
        ty.kind = TypeKind.Moved;
        ty.data.new_location = ctx.final_i32_ty;
        *p = ctx.final_i32_ty;
        return Result.OK;
    }

    if ty.kind == TypeKind.AnyFloat {
        ty.kind = TypeKind.Moved;
        ty.data.new_location = ctx.final_f32_ty;
        *p = ctx.final_f32_ty;
        return Result.OK;
    }

    if ty.kind == TypeKind.Any {
        util.report_simple(e.ErrorKind.CouldNotInfer, declared_at);
        // this is done, so that no error will be reported multiple times
        ty.kind = TypeKind.Error;
        return Result.Error;
    }

    if ty.kind == TypeKind.Signature {
        let result = finalize(ctx, &ty.data.signature.func, declared_at);
        *p = move(ctx, ty);
        return result;
    }

    if ty.kind == TypeKind.Function {
        let f = &ty.data.function;

        let result = Result.OK;
        let current = f.params_head;
        while current != null {
            result = result.or(finalize(ctx, &current.value, declared_at));
            current = current.next;
        }
        result = result.or(finalize(ctx, &f.ret, declared_at));

        if result.is_error() {
            return Result.Error;
        }
    }

    *p = move(ctx, ty);
    return Result.OK;
}
