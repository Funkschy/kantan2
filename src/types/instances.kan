import ":std/str";
import ":std/ptrvec";

import "util";
import "types" as _;

// This is a set of concrete type instances used for types that may
// be generic (functions, structs and unions)
// For a normal function/struct/union, this will only contain a single type after typechecking,
// however templates may have an arbitrary amount of instances based on their invocations
type InstanceSet struct {
    // The number of checked instances. Since every template can instantiate a range of further
    // templates, we execute the template pass of the type checker multiple times.
    // (see Compiler.infer_and_check_types)
    // This number is needed, so that we don't check the template with the same input types multiple
    // times, because that would be a waste of time
    checked: usize,
    _list: ptrvec.Vec // ptrvec.Vec[*Type]
}

def instance_set(): InstanceSet {
    let i: InstanceSet = undefined;
    i.checked = 0;
    i.init();
    return i;
}

def (l: *InstanceSet) init() {
    l.checked = 0;
    l._list = ptrvec.create();
}

def (l: *InstanceSet) free() {
    l._list.free();
}

def (l: *InstanceSet) find(t: *Type): *Type {
    for let i: usize = 0; i < l._list.len; i += 1 {
        let instance = l.get(i);
        if ty_equals(instance, t) {
            return instance;
        }
    }

    return null;
}

// returns the type in the set, so either the already existing one or the newly inserted
def (l: *InstanceSet) push(t: *Type): *Type {
    let existing_instance = l.find(t);
    if existing_instance != null {
        // this instance already exists, so just return it
        return existing_instance;
    }

    l._list.push_ptr(t as *void);
    return t;
}

def (l: *InstanceSet) get(idx: usize): *Type {
    return l._list.get(idx) as *Type;
}

def (l: *InstanceSet) get_ptr(idx: usize): **Type {
    return l._list.get_ptr(idx) as **Type;
}

def (l: *InstanceSet) len(): usize {
    return l._list.len;
}

// this behaves different from the normal Type.equals in the case of signatures
def ty_equals(a: *Type, b: *Type): bool {
    if a == b {
        return true;
    }

    // variables are ignored for equality
    while a.kind == TypeKind.Variable {
        a = a.data.inner;
    }
    while b.kind == TypeKind.Variable {
        b = b.data.inner;
    }

    if a.kind != b.kind {
        return false;
    }

    if a.kind == TypeKind.Int {
        return a.width.equals(b.width)
            && a.data.int.equals(b.data.int);
    }

    if a.kind == TypeKind.Float {
        return a.width.equals(b.width);
    }

    if a.kind == TypeKind.Bool || a.kind == TypeKind.Void {
        return true;
    }

    if a.is_const_size_indirect_type() {
        return ty_equals(a.data.ptr_or_slice_to, b.data.ptr_or_slice_to);
    }

    if a.kind == TypeKind.Error {
        return false;
    }

    if a.kind == TypeKind.Signature {
        let a_sig = &a.data.signature;
        let b_sig = &b.data.signature;
        if !a_sig.name.equals(b_sig.name) {
            return false;
        }
        if a_sig.declared_in.index != b_sig.declared_in.index {
            return false;
        }
        return ty_equals(a_sig.func, b_sig.func);
    }

    if a.kind == TypeKind.Function {
        let a_f = &a.data.function;
        let b_f = &b.data.function;
        if a_f.num_params != b_f.num_params {
            return false;
        }

        let a_p = a_f.params_head;
        let b_p = b_f.params_head;
        while a_p != null {
            if !ty_equals(a_p.value, b_p.value) {
                return false;
            }

            a_p = a_p.next;
            b_p = b_p.next;
        }

        return ty_equals(a_f.ret, b_f.ret);
    }

    // because a.kind == b.kind
    return true;
}
