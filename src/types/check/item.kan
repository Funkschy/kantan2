import ":std/dbg";
import ":std/str";
import ":util" as _;
import ":ast/item" as _;

import ":error" as e;

import "../util";
import "../ctx" as _;
import "../types" as _;

import "stmt" as tychk;

def check(ctx: *TyCtx, item: *Item): Result {
    if item.kind == ItemKind.FuncDef {
        let def_ty = ctx.lookup_decl(item.name.as_view());
        if def_ty == null {
            util.report_str(e.ErrorKind.UndeclaredType, item.name.span, item.name.as_view());
            return Result.Error;
        }

        let is_template = def_ty.is_template();
        if is_template && ctx.current_pass != Pass.Templates {
            return Result.OK;
        } else if !is_template && ctx.current_pass != Pass.Functions {
            return Result.OK;
        }

        let i: usize = 0;
        let sig_instance = def_ty;
        if is_template {
            sig_instance = null;
            i = def_ty.data.template.instances.checked;

            if i < def_ty.data.template.instances.len() {
                ctx.had_unchecked_templates = true;
                sig_instance = def_ty.data.template.instances.get(i);
            }
        }

        dbg.assert(sig_instance == null || sig_instance.kind == TypeKind.Signature, "expected signature");

        let result = Result.OK;
        while sig_instance != null {
            let func_instance = sig_instance.data.signature.func;

            ctx.open_scope();
            // bind params
            let param = func_instance.data.function.params_head;
            while param != null {
                dbg.assert(param.name.kind == NameKind.Ident, "expected ident, not str.View");
                let name = &param.name.data.ident;
                ctx.bind_value_public(name.as_view(), param.value, &name.span);
                param = param.next;
            }

            ctx.current_signature = sig_instance;
            result = result.or(tychk.check(ctx, item.data.func_def.block_stmt));
            ctx.close_scope();

            i += 1;
            if is_template && i < def_ty.data.template.instances.len() {
                sig_instance = def_ty.data.template.instances.get(i);
            } else {
                sig_instance = null;
            }
        }

        if is_template {
            def_ty.data.template.instances.checked = i;
        }

        return result;
    }

    dbg.assert(false, "Unhandled ItemKind");
    return Result.Error;
}
