import ":std/str";
import ":error" as e;
import ":ast/expr" as _;

import "../ctx";
import "../types" as _;
import "../util" as _;

// this kinda works like a super class, so i think this name is intuitive
import "expr" as super;

def infer(ctx: *ctx.TyCtx, expr: *Expr): TyResult {
    if expr.data.unary.kind == UnaryKind.BoolNegate {
        let bool_ty = lookup_builtin(ctx, str.view("bool", 4));
        if bool_ty.is_error() {
            // this should never happen ever, but it's probably better to
            // handle it anyway
            return error();
        }

        // in this case we can actually check against the bool type, since
        // there is just one option
        return super.check(ctx, expr.data.unary.right, bool_ty.ty);
    }

    // all other unary expressions need to infer the rhs first
    let right = super.infer(ctx, expr.data.unary.right);
    if right.is_error() {
        return right;
    }

    if expr.data.unary.kind == UnaryKind.Deref {
        if !right.ty.is_pointer() {
            let actual = right.ty.to_string();
            defer actual.free();
            report_str(e.ErrorKind.DerefNonPtr, expr.span, actual.view());
            return error();
        }

        return ok(right.ty.checked_var_innermost().data.ptr_to);
    }

    if expr.data.unary.kind == UnaryKind.AddrOf {
        let ty = ctx.alloc_ty();
        ty.kind = TypeKind.Ptr;
        ty.data.ptr_to = right.ty;
        return ok(ty);
    }

    if expr.data.unary.kind == UnaryKind.NumNegate {
        // we can unfortunately not check against anyInt, since right may
        // also be a float
        if !right.ty.is_number() {
            let actual = right.ty.to_string();
            defer actual.free();
            report_str(e.ErrorKind.NegateNonNumber, expr.span, actual.view());
            return error();
        }

        return ok(right.ty);
    }

    report_internal_error(str.view_from("unhandled unary kind"));
    return error();
}
