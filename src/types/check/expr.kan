import ":std/str";
import ":std/dbg";

import ":error" as e;
import ":source/ident";
import ":ast/expr" as _;

import "../ctx";
import "../util" as _;
import "../types" as _;

import "call";
import "unary";
import "binary";
import "literal";

// An example of how the type checking/infering works:
// the following is program structure is implied:
//      type Vec[T] struct { elements: *T }
//      def [T] create(): Vec[T] {...};
//
// 1) let v = create(); // no type information was provided
//  from the return type of 'create', we know that 'v' has to be a Vec, but we don't know T
//
// 2) v.push(1);
//  we know that T has to be some kind of integer, so we can infer v to be Vec[anyInt]
//  this first infers the type of push to be (Vec[any]) -> void and the type of 1 to be anyInt
//  and then checks, if anyInt can be used as any. This is were the kantan typechecker behaves
//  different from other bidirectional typecheckers, since the check may actually change the type
//  which we check against
//
// 3) v.push(undefined); // this does not change anything, since undefined can be any type
// 4) let first = *v.values; // we can infer first to be of type anyInt
// 5) first = 2 as u32;
// since u32 is more concrete than anyInt, we know that first has to be of type u32 and therefore
// Vec.elements must be *u32, meaning that v has type Vec[u32]

// if an error occurs, it will be reported and the returned type will be error
def infer(ctx: *ctx.TyCtx, expr: *Expr): TyResult {
    let inferred = _infer(ctx, expr);
    expr.ty = inferred.ty;
    return inferred;
}

def _infer(ctx: *ctx.TyCtx, expr: *Expr): TyResult {
    if expr.kind == ExprKind.Literal {
        return literal.infer(ctx, expr);
    }

    // TODO(#9): find some way to propagate context upwards. e.g. a span inside TyResult
    if expr.kind == ExprKind.Ident {
        let name = expr.data.ident.name.as_view();
        let ty = ctx.lookup_value(name);
        if ty != null {
            if ty.kind == TypeKind.Error {
                // swallow the error without reporting
                return error();
            }

            // the lookup for identifiers includes a special case for templates.
            // In the case of a template, we wrap the actual template type in another type variable,
            // so that we can later easily change the template type to a concrete instance of that
            // template (look into call and init resolution for more info)
            if ty.kind == TypeKind.Template {
                let var = ctx.alloc_ty();
                var.kind = TypeKind.Variable;
                var.data.inner = ty;
                ty = var;
            }

            expr.ty = ty;
            return ok(ty);
        }

        // check if this is an imported module
        // since imports are a special case in the branch fro AccessExpr, this just needs to
        // give an error
        let module = ctx.lookup_module(name);
        if module != null {
            report_simple(e.ErrorKind.ModuleWithoutSelector, expr.span);
            return error();
        }

        report_str(e.ErrorKind.UndeclaredIdentifier, expr.span, name);
        return error();
    }

    if expr.kind == ExprKind.Assign {
        let assign = &expr.data.assign;

        let left = infer(ctx, assign.left);
        if left.is_error() {
            return left;
        }

        let right = check(ctx, assign.right, left.ty);
        if right.is_error() {
            return right;
        }

        return ok(right.ty);
    }

    if expr.kind == ExprKind.Access {
        let access = &expr.data.access;

        // the left side is a complex expression (e.g. another AccessExpr)
        if access.left.kind != ExprKind.Ident {
            let left = infer(ctx, access.left);
            if left.is_error() {
                return left;
            }

            dbg.assert(false, "implement lookup in type here");
            return error();
        }

        let name = access.left.data.ident.name.as_view();

        // the left side is an identifier to some value (e.g. an instance of a struct)
        let ty = ctx.lookup_value(name);
        if ty != null {
            if ty.kind == TypeKind.Error {
                // swallow the error without reporting
                return error();
            }

            dbg.assert(false, "implement lookup in type here");
            return error();
        }

        // the left side is an imported module instead
        let module = ctx.lookup_module(name);
        if module != null {
            // switch the module context, to perform the lookup
            let current_module = ctx.current_module.module;
            defer ctx.set_module(current_module);

            ctx.set_module(module);

            let right = infer(ctx, access.ident);
            if right.is_error() {
                return right;
            }

            access.left.ty = ctx.alloc_ty().init_module(module);
            expr.ty = right.ty;
            return right;
        }

        report_str(e.ErrorKind.UndeclaredIdentifier, access.left.span, name);
        return error();
    }

    if expr.kind == ExprKind.Unary {
        return unary.infer(ctx, expr);
    }

    if expr.kind == ExprKind.Binary {
        return binary.infer(ctx, expr);
    }

    if expr.kind == ExprKind.Call {
        return call.infer(ctx, expr);
    }

    if expr.kind == ExprKind.Sizeof {
        let tyid = expr.data.size_of.tyid;
        let ty = ctx.lookup_tyid(tyid);
        if ty == null {
            report_str(e.ErrorKind.UndeclaredType, tyid.span, tyid.span.as_view());
            return error();
        }
        expr.data.size_of.resolved = ty;

        if ty.is_unsized() {
            report_str(e.ErrorKind.SizeofUnsizedType, tyid.span, tyid.span.as_view());
            return error();
        }

        return lookup_builtin(ctx, str.view("usize", 5));
    }

    report_internal_error_span(str.view_from("unhandled expr kind"), expr.span);
    return error();
}

def check(ctx: *ctx.TyCtx, expr: *Expr, expected: *Type): TyResult {
    let inferred = infer(ctx, expr);
    if inferred.is_error() {
        report_simple(e.ErrorKind.CouldNotInfer, expr.span);
        return error();
    }

    return try_unify(ctx, expr, inferred.ty, expected);
}

def try_unify(ctx: *ctx.TyCtx, expr: *Expr, inferred: *Type, expected: *Type): TyResult {
    // TODO(#27): implement proper errors for unsized types
    if inferred.is_unsized() {
        report_internal_error_span(str.view_from("unsized inferred"), expr.span);
        return error();
    }

    if expected.is_unsized() {
        report_internal_error_span(str.view_from("unsized expected"), expr.span);
        return error();
    }

    let instance = ctx.unify(inferred, expected);
    if instance == null {
        let expected = expected.to_string();
        defer expected.free();
        let actual = inferred.to_string();
        defer actual.free();
        report_str2(e.ErrorKind.WrongType, expr.span, expected.view(), actual.view());
        return error();
    }

    expr.ty = instance;
    return ok(instance);
}
