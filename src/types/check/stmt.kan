import "../../std/dbg";
import "../../cli/report";
import "../../error" as e;

import "../../util" as _;
import "../../ast/stmt" as _;

import "../ctx" as _;
import "../types" as _;

import "expr" as tychk;

def check(ctx: *TyCtx, stmt: *Stmt): Result {
    if stmt.kind == StmtKind.Expr {
        tychk.infer(ctx, &stmt.data.expr);
        return Result.OK;
    }

    if stmt.kind == StmtKind.Block {
        let block = &stmt.data.block;
        let len = block.len();

        let had_errors = false;
        for let i: usize = 0; i < len; i += 1 {
            let s = block.at(i);
            if check(ctx, s).is_error() {
                had_errors = true;
            }
        }

        if had_errors {
            return Result.Error;
        }

        return Result.OK;
    }

    if stmt.kind == StmtKind.LocalVarDecl {
        let decl = &stmt.data.local;

        let inferred = tychk.infer(ctx, decl.value);
        // TODO: bind special error type to avoid repeating error messages
        if inferred.is_error() {
            return Result.Error;
        }

        let ty = inferred.ty;

        if decl.ty != null {
            let expected = ctx.lookup_tyid(decl.ty);
            if expected == null {
                let error = e.string_single(e.ErrorKind.UndeclaredType, decl.ty.span, decl.ty.span.as_view());
                report.print_error(&error);
                return Result.Error;
            }

            let instance = tychk.try_unify(ctx, decl.value, inferred.ty, expected);
            if instance.is_error() {
                return Result.Error;
            }
            ty = instance.ty;
        }

        ctx.bind_value_public(decl.name.as_view(), ty, &decl.name.span);
        return Result.OK;
    }

    dbg.assert(false, "Unhandled StmtKind");
    return Result.Error;
}
