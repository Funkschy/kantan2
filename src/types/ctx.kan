import ":std/dbg";
import ":std/map";
import ":std/str";

import ":ast/tyid";
import ":util" as _;
import ":source/span";
import ":memory/arena";

import ":error" as e;
import ":cli/report" as report;

import "util";
import "scope";

import "info" as _;
import "types" as _;

import "function";
import "template";
import "primitive";

// the context used while type checking
type TyCtx struct {
    ty_arena: *arena.TypedArena,
    node_arena: *arena.TypedArena,
    temp_arena: arena.TypedArena,

    // this holds the types of lvalues, for later lookup by name
    values: scope.ScopeStack,
    // this holds declared types, e.g. structs
    types: scope.ScopeStack,

    // the current function or null, if in global scope
    current_function: *Type,
    final_i32_ty: *Type,
    final_f32_ty: *Type
}

def create(ty_arena: *arena.TypedArena, node_arena: *arena.TypedArena): TyCtx {
    dbg.assert(ty_arena.elem_size == sizeof Type, "invalid memory ty_arena");
    dbg.assert(node_arena.elem_size == sizeof TypeNode, "wrong type node arena size");

    let temp_arena = arena.typed(sizeof Type);

    let ctx = TyCtx {
        ty_arena: ty_arena,
        node_arena: node_arena,
        temp_arena: temp_arena,
        values: scope.scope_stack(),
        types: scope.scope_stack(),
        current_function: null,
        final_i32_ty: null,
        final_f32_ty: null
    };
    ctx.init_global_types();
    return ctx;
}

def (ctx: *TyCtx) free() {
    ctx.close_scope();
    ctx.values.free();
    ctx.types.free();
    ctx.temp_arena.free();
}

def (ctx: *TyCtx) init_global_types() {
    ctx.open_scope();

    let void_ty = ctx.alloc_ty();
    void_ty.kind = TypeKind.Void;
    ctx.bind_type_public(str.view_from("void"), void_ty, null);

    let b_ty = ctx.alloc_ty();
    b_ty.kind = TypeKind.Bool;
    ctx.bind_type_public(str.view_from("bool"), b_ty, null);

    let c_ty = ctx.alloc_ty();
    c_ty.init_int(primitive.Signedness.Signed, size_bytes(1));
    ctx.bind_type_public(str.view_from("i8"), c_ty, null);

    let isize_ty = ctx.alloc_ty();
    isize_ty.init_int(primitive.Signedness.Signed, size_bytes_platform_dependent(8));
    ctx.bind_type_public(str.view_from("isize"), isize_ty, null);

    let s_ty = ctx.alloc_ty();
    s_ty.init_ptr(c_ty);
    ctx.bind_type_public(str.view_from("string"), s_ty, null);

    let i32_ty = ctx.alloc_ty();
    i32_ty.init_int(primitive.Signedness.Signed, size_bytes(4));
    ctx.bind_type_public(str.view_from("i32"), i32_ty, null);

    // i32 and f32 are special, since they could be used before being moved in the finalize stage
    // also they are referenced directly inside TyCtx
    let final_i32_ty = ctx.alloc_final_ty();
    *final_i32_ty = *i32_ty;
    ctx.final_i32_ty = final_i32_ty;

    let u32_ty = ctx.alloc_ty();
    u32_ty.init_int(primitive.Signedness.Unsigned, size_bytes(4));
    ctx.bind_type_public(str.view_from("u32"), u32_ty, null);

    let f32_ty = ctx.alloc_ty();
    f32_ty.init_float(size_bytes(4));
    ctx.bind_type_public(str.view_from("f32"), f32_ty, null);

    let final_f32_ty = ctx.alloc_final_ty();
    *final_f32_ty = *f32_ty;
    ctx.final_f32_ty = final_f32_ty;

    let f64_ty = ctx.alloc_ty();
    f64_ty.init_float(size_bytes(8));
    ctx.bind_type_public(str.view_from("f64"), f64_ty, null);
}

def (ctx: *TyCtx) open_scope() {
    ctx.values.open();
    ctx.types.open();
}

def (ctx: *TyCtx) close_scope() {
    ctx.values.close();
    ctx.types.close();
}

def (ctx: *TyCtx) alloc_final_ty(): *Type {
    return ctx.ty_arena.alloc() as *Type;
}

def (ctx: *TyCtx) alloc_ty(): *Type {
    return ctx.temp_arena.alloc() as *Type;
}

def (ctx: *TyCtx) alloc_node(): *TypeNode {
    return ctx.node_arena.alloc() as *TypeNode;
}

// a type variable to any
def (ctx: *TyCtx) any_var(): *Type {
    let anyTy = ctx.alloc_ty();
    anyTy.kind = TypeKind.Any;

    let var = ctx.alloc_ty();
    var.kind = TypeKind.Variable;
    var.data.inner = anyTy;
    return var;
}

// a type variable to anyInt
def (ctx: *TyCtx) any_var_int(): *Type {
    let anyIntTy = ctx.alloc_ty();
    anyIntTy.kind = TypeKind.AnyInt;

    let var = ctx.alloc_ty();
    var.kind = TypeKind.Variable;
    var.data.inner = anyIntTy;
    return var;
}

def (ctx: *TyCtx) any_var_float(): *Type {
    let anyFloatTy = ctx.alloc_ty();
    anyFloatTy.kind = TypeKind.AnyFloat;

    let var = ctx.alloc_ty();
    var.kind = TypeKind.Variable;
    var.data.inner = anyFloatTy;
    return var;
}

def (ctx: *TyCtx) error_type(): *Type {
    let error = ctx.alloc_ty();
    error.kind = TypeKind.Error;
    return error;
}

def (ctx: *TyCtx) get_current_function(): *function.Function {
    if ctx.current_function == null {
        return null;
    }
    return &ctx.current_function.data.function;
}

def lookup_in(name: str.View, stack: *scope.ScopeStack): *Type {
    let item: scope.BoundItem = undefined;
    if stack.lookup(name, &item).is_error() {
        return null;
    }

    return item.ty;
}

def (ctx: *TyCtx) lookup_type(name: str.View): *Type {
    return lookup_in(name, &ctx.types);
}

def (ctx: *TyCtx) lookup_value(name: str.View): *Type {
    return lookup_in(name, &ctx.values);
}

def (ctx: *TyCtx) lookup_tyid(ty: *tyid.Type): *Type {
    if ty.kind == tyid.TypeKind.Ptr {
        let ptr = ctx.alloc_ty();
        ptr.kind = TypeKind.Ptr;

        let inner = ctx.lookup_tyid(ty.inner());
        if inner == null {
            return null;
        }
        ptr.data.ptr_to = inner;
        return ptr;
    }

    let p = &ty.data.path;
    dbg.assert(p.segments.len == 1, "TODO(#26): handle arbitrary tyid segments");

    return ctx.lookup_type(p.segment_at(0).as_view());
}

def bind_in(name: str.View, ty: *Type, vis: Visibility, stack: *scope.ScopeStack, declared_at: *span.Span) {
    let item = scope.BoundItem {
        ty: ty,
        vis: vis,
        declared_at: declared_at
    };
    stack.bind(name, item);
}

def (ctx: *TyCtx) bind_temp(ty: *Type, span: *span.Span) {
    let item = scope.BoundItem {
        ty: ty,
        vis: Visibility.Public,
        declared_at: span
    };
    ctx.values.top().temp_vars.push(&item as *void);
}

def (ctx: *TyCtx) bind_value_public(name: str.View, ty: *Type, declared_at: *span.Span) {
    bind_in(name, ty, Visibility.Public, &ctx.values, declared_at);
}

def (ctx: *TyCtx) bind_type_public(name: str.View, ty: *Type, declared_at: *span.Span) {
    bind_in(name, ty, Visibility.Public, &ctx.types, declared_at);
}

def (ctx: *TyCtx) unify(a: *Type, previous: *Type): *Type {
    if a == previous {
        return a;
    }

    if ctx.is_concrete_version_of(a, previous) {
        dbg.assert(previous.is_variable(), "previous is not a variable");
        // point the innermost variable to a instead
        *previous.var_innermost() = a;
        return a;
    }

    if ctx.is_less_concrete_version_of(a, previous) {
        dbg.assert(a.is_variable(), "expression type is not a variable");
        *a.var_innermost() = previous;
        return previous;
    }

    let left = a.checked_var_innermost();
    let right = previous.checked_var_innermost();

    if left.kind == TypeKind.Ptr && right.kind == TypeKind.Ptr {
        let inner = ctx.unify(left.data.ptr_to, right.data.ptr_to);
        if inner == null {
            return null;
        }

        left.data.ptr_to = inner;
        return a;
    }

    if left.equals(right) {
        if a.is_variable() {
            *a.var_innermost() = previous;
            return previous;
        } else if previous.is_variable() {
            *previous.var_innermost() = a;
            return a;
        } else {
            a.kind = TypeKind.Variable;
            a.data.inner = previous;
        }

        return a;
    }

    return null;
}

// checks if other is a less concrete version of t
def (ctx: *TyCtx) is_concrete_version_of(t: *Type, other: *Type): bool {
    while t.is_variable() {
        t = t.data.inner;
    }
    while other.is_variable() {
        other = other.data.inner;
    }

    return other.kind == TypeKind.Any
        || t.kind == TypeKind.Int && other.kind == TypeKind.AnyInt
        || t.kind == TypeKind.Float && other.kind == TypeKind.AnyFloat;
}

// checks if t is a less concrete version of other
def (ctx: *TyCtx) is_less_concrete_version_of(t: *Type, other: *Type): bool {
    while t.is_variable() {
        t = t.data.inner;
    }
    while other.is_variable() {
        other = other.data.inner;
    }

    return t.kind == TypeKind.Any
        || t.kind == TypeKind.AnyInt && other.kind == TypeKind.Int
        || t.kind == TypeKind.AnyFloat && other.kind == TypeKind.Float;
}

// this will get the actual function type for a callable type or null, if the types was not callable
// in the case of a template, it will initialize all generic parameters using the allocator
def (ctx: *TyCtx) get_function(t: *Type): *Type {
    if t.kind == TypeKind.Variable {
        return ctx.get_function(t.data.inner);
    }

    if t.kind == TypeKind.Function {
        return t;
    }

    if t.kind == TypeKind.Template {
        let f = ctx.get_function(t.data.template.inner);
        if f == null {
            return null;
        }

        let map = ctx.monomorph_map(&t.data.template);
        defer map.free();

        let monomorphed = ctx.alloc_ty().init_func(t.data.template.instances);
        monomorphed.data.function = f.data.function;
        monomorphed.data.function.params_head = null;
        let monomorphed_f = &monomorphed.data.function;

        let current_read = f.data.function.params_head;
        let current_write = &monomorphed_f.params_head;

        while current_read != null {
            let monomorphed_param = ctx.replace_param_type(&map, current_read.value);

            let name = current_read.name.data.ident;
            let new_node = ctx.alloc_node().init_ident(name, monomorphed_param);
            *current_write = new_node;

            current_write = &(*current_write).next;
            current_read = current_read.next;
        }

        monomorphed_f.ret = ctx.replace_param_type(&map, monomorphed_f.ret);
        return monomorphed;
    }

    return null;
}

def (ctx: *TyCtx) replace_param_type(monomorph_map: *map.Map, param: *Type): *Type {
    if param.kind == TypeKind.TemplateParam {
        let key = key_from_ident(param.data.template_param.name);
        let monomorphed = monomorph_map.get(key) as *Type;
        dbg.assert(monomorphed != null, "monomorphed is null");
        return monomorphed;
    }

    if param.kind == TypeKind.Ptr {
        let inner = ctx.replace_param_type(monomorph_map, param.data.ptr_to);
        let ptr = ctx.alloc_ty();
        ptr.kind = TypeKind.Ptr;
        ptr.data.ptr_to = inner;
        return ptr;
    }

    return param;
}

def (ctx: *TyCtx) monomorph_map(t: *template.Template): map.Map {
    let map = map.with_cap(t.num_params);
    let current = t.generics_head;
    while current != null {
        let param = current.value;
        let monomorphed = ctx.any_var();

        let key = key_from_ident(param.data.template_param.name);
        map.insert(key, monomorphed as *void);

        current = current.next;
    }
    return map;
}

