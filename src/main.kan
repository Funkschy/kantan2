import "io";

import "cli/opt";
import "cli/config";
import "cli/report";

import "compiler" as _;

// for table initialization
import "ast/token";
import "error";

type ReturnCode enum {
    OK,
    NoInputFiles,
    CliOptionError
}

def main(argc: i32, argv: *string): ReturnCode {
    if argc <= 1 {
        report.print_simple("no input files");
        return ReturnCode.NoInputFiles;
    }

    init_tables();

    let opts = opt.parse(argc, argv);
    let config = config.from_options(&opts);
    defer config.free();

    let compiler = compiler(&config);
    defer compiler.free();

    // this is needed for mi mode, where errors are printed as json
    report.init(config.error_output_format, &compiler.modmap);
    defer report.finish();

    if opts.had_errors {
        return ReturnCode.CliOptionError;
    } else if opts.exit_immediately {
        return ReturnCode.OK;
    }

    if config.files.len < 1 {
        report.print_simple("no kantan files");
        return ReturnCode.NoInputFiles;
    }

    compiler.read_files();
    compiler.resolve_imports();

    return ReturnCode.OK;
}

// Initialize global arrays
// this function should be removed, as soon as we can declare global array literals
def init_tables() {
    token.init();
    error.init();
}
