import "io";
import "std/str";
import "std/ptrvec";

import "cli/opt";
import "cli/report";
import "cli/config" as conf;

import "util" as _;
import "compiler" as _;

// for table initialization
import "target/parse" as ptarget;
import "ast/token";
import "types/info";
import "error";

type ReturnCode enum {
    OK,
    NoInputFiles,
    CliOptionError,
    InvalidInput
}

def main(argc: i32, argv: *string): ReturnCode {
    if argc <= 1 {
        report.print_simple(str.view("no input files", 14));
        return ReturnCode.NoInputFiles;
    }

    init_tables();

    let opts = opt.parse(argc, argv);
    let files = &opts.files;
    defer files.free();

    if opts.had_errors {
        return ReturnCode.CliOptionError;
    } else if opts.exit_immediately {
        return ReturnCode.OK;
    }

    let config: conf.Config = undefined;
    if conf.from_options(&opts, &config).is_error() {
        return ReturnCode.CliOptionError;
    }
    defer config.free();
    info.set_target_pointer_width(config.target.ptr_width_bytes as i32);

    let compiler = compiler(&config);
    defer compiler.free();

    // this is needed for mi mode, where errors are printed as json
    report.init(config.error_output_format, &compiler.modmap);
    defer report.finish();

    if opts.dump_config {
        io.printf("\"config\": ");
        defer io.printf(",\n");

        let json = config.to_json();
        io.printf("%s", json.cstring());
        json.free();
    }

    if config.files.len < 1 {
        report.print_simple(str.view("no kantan files", 15));
        return ReturnCode.NoInputFiles;
    }

    if compiler.read_files().is_error() {
        return ReturnCode.InvalidInput;
    }

    if compiler.resolve_imports().is_error() {
        return ReturnCode.InvalidInput;
    }

    if compiler.parse().is_error() {
        return ReturnCode.InvalidInput;
    }

    if config.quit_after_parsing {
        if opts.dump_ast {
            dump_ast(&compiler);
        }
        return ReturnCode.OK;
    }

    if compiler.resolve_types().is_error() {
        return ReturnCode.InvalidInput;
    }

    // TODO(#41): integrate this into the program in more appropriate manner
    if opts.dump_type_graph {
        let g = &compiler.type_graph;

        io.printf("\"type-graph\": ");
        defer io.printf(",\n");

        let json = g.to_json(str.view_from("type graph"));
        io.printf("%s", json.cstring());
        json.free();
    }

    if compiler.infer_and_check_types().is_error() {
        return ReturnCode.InvalidInput;
    }

    if opts.dump_ast {
        dump_ast(&compiler);
    }

    {
        import "memory/arena";

        import "ir/ir";
        import "ir/memory";
        import "ir/ctx" as ir_ctx;
        import "ir/compile/item" as ir_item;

        let function_arena = arena.typed(sizeof ir.Function);
        defer function_arena.free_destructor(&ir.Function.free as arena.Destructor);

        let string_literal_arena = arena.typed(sizeof ir_ctx.StringLiteral);
        defer string_literal_arena.free_destructor(&ir_ctx.StringLiteral.free as arena.Destructor);

        let proj_arena = arena.typed(sizeof memory.ProjectionNode);
        defer proj_arena.free();

        if opts.dump_ir {
            io.printf("\"ir\": [");
        }

        let result = Result.OK;
        for let i: usize = 0; i < compiler.modmap.len(); i += 1 {
            let mod = compiler.modmap.at(i);
            let ctx = ir_ctx.create(&function_arena, &string_literal_arena, &proj_arena, mod);
            defer ctx.free();

            for let j: usize = 0; j < mod.num_items(); j += 1 {
                let item = mod.item_at(j);
                result = result.or(ir_item.compile(&ctx, item));
            }

            if !opts.dump_ir {
                continue;
            }

            if i > 0 {
                io.printf(", ");
            }

            let path = mod.absolute_path();
            io.printf("{\"path\": \"%.*s\"", path.len, path.data);
            io.printf(",\"functions\": [");

            // TODO: the order of functions here is arbitrary, but the tests rely on a specific
            //  order, so that is a bug waiting to happen
            let iter = ctx.functions.iter();
            let add_comma = false;
            for let item = iter.next(); item != null; item = iter.next() {
                if add_comma {
                    io.printf(", ");
                }
                add_comma = true;

                let f = item.value as *ir.Function;
                let json = f.to_json();
                io.printf("%s\n", json.cstring());
                json.free();
            }

            // end of module
            io.printf("]}");
        }

        if opts.dump_ir {
            // trailing ',' for "errors"
            io.printf("],\n");
        }

        if result.is_error() {
            return ReturnCode.InvalidInput;
        }
    }

    return ReturnCode.OK;
}

def dump_ast(compiler: *Compiler) {
    // TODO(#12): integrate this into the program in more appropriate manner
    io.printf("\"modules\": [");
    defer io.printf("],\n");

    for let i: usize = 0; i < compiler.modmap.len(); i += 1 {
        if i > 0 {
            io.printf(", ");
        }

        let mod = compiler.modmap.at(i);
        let json = mod.to_json();
        io.printf("%s\n", json.cstring());
        json.free();
    }
}

// Initialize global arrays
// this function should be removed, as soon as we can declare global array literals
def init_tables() {
    ptarget.init();
    token.init();
    error.init();
}
