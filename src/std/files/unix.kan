import "path";

import "../str";
import "../libc";

let system_separator: i8  = 47; // '/'

extern def getcwd(buf: string, buf_size: usize): string;
extern def realpath(path: string, resolved: string): string;

def get_separator(): i8 {
    return system_separator;
}

def last_separator_ptr(p: *path.Path): string {
    let ptr = p.inner + p.len - 1;
    while ptr > p.inner {
        ptr = ptr - 1;
        if *ptr == system_separator {
            return ptr;
        }
    }

    return null;
}

def is_abs(p: *path.Path): bool {
    return *p.inner == system_separator || *p.inner == '~';
}

def is_root(p: *path.Path): bool {
    return is_abs(p) && libc.strlen(p.inner) == 1;
}

// this functions uses the posix only "realpath" function
// this function resolves stuff like .. or . in place
//
// this only works, if the files does actually exist!
def canonicalize(p: *path.Path, dest: *path.Buf): path.Result {
    // the path has to be null terminated, so we have to make a heap allocation here
    let buf = p.to_string();
    defer buf.free();

    let real = realpath(buf.cstring(), null);
    if real == null {
        return path.Result.FileNotFound;
    }

    *dest = path.move_buf(real);
    return path.Result.OK;
}

// this is not thread safe, but since this will only be called once, we might aswell make this
// memory static
let buf: [512]i8 = undefined;
def get_cwd(): path.Buf {
    let buf_size: usize = 512;

    if getcwd(&buf[0], buf_size) == null {
        return path.empty().to_buf();
    }

    return path.create_buf(&buf[0]);
}

