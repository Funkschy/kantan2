import "../str";
import "../dbg";
import "../libc";
import "../cdeps";

// TODO: this must be platform dependent
import "unix" as impl;

type Path struct {
    len: usize,
    inner: string
}

def empty(): Path {
    return Path { len: 0, inner: null };
}

def create(value: string): Path {
    return create_l(value, libc.strlen(value));
}

def create_l(value: string, len: usize): Path {
    return Path { len: len, inner: value };
}

def from_view(view: str.View): Path {
    return create_l(view.data, view.len);
}

def (p: *Path) ends_with(s: string): bool {
    let len = libc.strlen(s);
    if len > p.len {
        return false;
    }

    return libc.strncmp(p.inner + (p.len - len), s, len) == 0;
}

def (p: *Path) is_abs(): bool {
    return impl.is_abs(p);
}

def (p: *Path) parent(): Path {
    if impl.is_root(p) {
        return *p;
    }

    let lsp = impl.last_separator_ptr(p);
    if lsp != null {
        return create_l(p.inner, (lsp - p.inner + 1) as usize);
    }

    return *p;
}

def (first: *Path) count_overlap(second: *Path): usize {
    let len = first.len;
    if second.len < first.len {
        len = second.len;
    }

    for let i: usize = 0; i < len; i += 1 {
        if *(first.inner + i) != *(second.inner + i) {
            return i;
        }
    }

    return len;
}

def (p: *Path) to_string(): str.String {
    return str.from_l(p.inner, p.len);
}

def (p: *Path) as_view(): str.View {
    return str.view(p.inner, p.len);
}

type Buf struct {
    inner: str.String
}

def create_buf(path: string): Buf {
    return Buf {
        inner: str.from(path)
    };
}

def move_buf(path: string): Buf {
    return Buf {
        inner: str.move_l(path, libc.strlen(path))
    };
}

def get_cwd(): Buf {
    return impl.get_cwd();
}

def (path: *Path) to_buf(): Buf {
    return Buf { inner: str.from_l(path.inner, path.len) };
}

def (b: *Buf) as_path(): Path {
    return create_l(b.inner.cstring(), b.inner.len());
}

def (b: *Buf) free() {
    b.inner.free();
}

def (base: *Path) merge_abs_rel(child: *Path, dest: *Buf): Result {
    return base.merge_abs_rel_suffix(child, null, dest);
}

def (base: *Path) merge_abs_rel_suffix(child: *Path, suffix: string, dest: *Buf): Result {
    if base.len == 0 || impl.is_abs(child) {
        // in the case, that the relative path (child) is already an absolute path, we just
        // have to check, if the files exists, and if it does, we copy the absolute path to dest
        let ret_val = impl.canonicalize(child, dest);
        if ret_val != Result.OK {
            return ret_val;
        }

        return Result.OK;
    }

    let combined: string = null;
    defer delete combined;

    if suffix != null {
        combined = cdeps.format_str(
            "%.*s%c%.*s%s",
            base.len,
            base.inner,
            impl.get_separator(),
            child.len,
            child.inner,
            suffix
        );
    } else {
        combined = cdeps.format_str(
            "%.*s%c%.*s",
            base.len,
            base.inner,
            impl.get_separator(),
            child.len,
            child.inner
        );
    }

    // combined will be freed by the defer delete above
    let pb = move_buf(combined);
    let as_path = pb.as_path();

    let ret_val = impl.canonicalize(&as_path, &pb);
    if ret_val != Result.OK {
        return ret_val;
    }

    *dest = pb;
    return Result.OK;
}

// the largest shared path of the 2 paths
// Example:
// The following files have a common sub path of '/home/user/'
// /home/user/test.kan
// /home/user/kantan/other.kan
def (first: Path) common_parent(second: Path): Buf {
    dbg.assert(impl.is_abs(&first), "First path was not absolute");
    dbg.assert(impl.is_abs(&second), "Second path was not absolute");

    let smaller_len = first.len;
    if second.len < smaller_len {
        smaller_len = second.len;
    }

    // TODO: on windows paths start with a drive letter, so we need to adjust
    //  the code to handle this. It would probably be sufficient, to just allow files on the same
    //  drive => just check the first letter of the absolute path
    let last_separator: usize = 0;
    for let i: usize = 0; i < smaller_len; i += 1 {
        let ptr = first.inner + i;

        if *ptr != *(second.inner + i) {
            let len = last_separator + 1;
            return create_l(first.inner, len).to_buf();
        }

        if *ptr == impl.get_separator() {
            last_separator = i;
        }
    }

    // both paths are either identical or one is a subpath of the other one
    return create_l(first.inner, smaller_len).to_buf();
}

type Result enum {
    OK,
    FileNotFound,
    CouldNotOpenFile,
    CouldNotAllocateFileBuffer,
    CouldNotReadFile
}

def (r: Result) is_ok(): bool {
    return r == Result.OK;
}

def (r: Result) is_error(): bool {
    return r != Result.OK;
}

def (r: Result) to_string(filename: Path): str.String {
    if r == Result.OK {
        return str.from("");
    }

    if r == Result.CouldNotAllocateFileBuffer {
        // this only works, if the string is less than 22 bytes long, since the small string
        // optimization will trigger
        return str.from("out of memory");
    }

    if r == Result.FileNotFound {
        let s = str.from("could not find '");
        s.push(filename.as_view());
        s.push(str.view("'", 1));
        return s;
    }

    if r == Result.CouldNotOpenFile {
        let s = str.from("could not open '");
        s.push(filename.as_view());
        s.push(str.view("'", 1));
        return s;
    }

    if r == Result.CouldNotReadFile {
        let s = str.from("error while reading '");
        s.push(filename.as_view());
        s.push(str.view("'", 1));
        return s;
    }

    dbg.unreachable();
    return undefined;
}
