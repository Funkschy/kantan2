type Inst enum {
    Nop,
    Halt,

    // EnterFunction(locals_space):
    //   push bp
    //   bp = sp
    //   sp += locals_space
    //
    // saves and updates the base pointer, then allocates stackspace for local variables,
    // which work differently from the operand stack, because they need to be aligned to their
    // respective variable sizes while the operand stack is always aligned to 8 bytes
    // e.g. if we have the locals: i32, *i32, i32
    // this will allocate 24 bytes, since the *i32 needs padding to be 8 aligned and there needs
    // to be padding after the last i32, to ensure the operand stack is 8 byte aligned
    EnterFunction,
    // localptr offset
    // push(vm.bp + offset)
    LocalPtr,

    // inc offset
    //
    // inc32 is equivalent to:
    // localptr offset
    // load32
    // const.i32 1
    // iadd
    // store32 offset
    Inc8,
    Inc16,
    Inc32,
    Inc64,

    // constww constant
    // push a iww following this instruction onto the stack
    ConstI8,
    ConstI16,
    ConstI32,
    ConstI64,

    // loads a constant from the constant pool at the index of its 32 bit parameter
    // push(constant_pool[u32])
    LoadConst,

    // swap the 2 elements on top of the stack
    Swap,
    // duplicate the top of stack
    Dup,

    // push(!pop())
    BoolNot,
    // push(~pop())
    Not,

    // push(-pop())
    INeg,

    // push(pop() + pop())
    IAdd,
    // push(pop() - pop())
    ISub,
    // push(pop() * pop())
    IMul,
    // push(pop() / pop())
    IDiv,
    // push(pop() % pop())
    IMod,

    BitAnd,
    BitOr,
    BitXor,

    LShift,
    RShift,

    EQ,
    NE,
    ST,
    SE,
    GT,
    GE,

    BoolAnd,
    BoolOr,

    // loadww
    // push(*pop())
    Load8,
    Load16,
    Load32,
    Load64,

    // storeww
    // *pop() = pop()
    Store8,
    Store16,
    Store32,
    Store64,

    // unconditional jmp, followed by an absolute instruction address
    // goto u64
    Jmp,
    // if pop() == true jmp
    Jif,

    // call nargs
    // pops a function reference from the stack and calls it
    //
    // vm.nargs = nargs
    // f = pop()
    // push ip + 1
    // goto f
    Call,
    Return
}

def with_size(start: Inst, bits: usize): Inst {
    let i_start = start as i32;
    if bits == 16 {
        i_start += 1;
    } else if bits == 32 {
        i_start += 2;
    } else if bits == 64 {
        i_start += 3;
    }

    return *(&i_start as *Inst);
}

def (i: Inst) _param_size_bytes(start: Inst, end: Inst): usize {
    if i >= start && i <= end {
        return 4 << (1 + i as i32 as usize - start as i32 as usize) >> 3;
    }

    return 0;
}

def (i: Inst) width_bytes(): usize {
    let w: usize = 1;
    w += i._param_size_bytes(Inst.ConstI8, Inst.ConstI64);
    w += (i >= Inst.Inc8 && i <= Inst.Inc64) as usize * 4;
    w += (i == Inst.EnterFunction) as usize * 4;
    w += (i == Inst.LocalPtr) as usize * 4;
    w += (i == Inst.LoadConst) as usize * 4;
    w += (i == Inst.Call) as usize * 4;
    w += (i == Inst.Jmp) as usize * 8;
    w += (i == Inst.Jif) as usize * 8;
    return w;
}
