import "io";

import "inst";

def dump_bytecode_dbg(program: *u8, program_len: usize) {
    let human_readable: [16]*i8 = undefined;
    human_readable[ 0] = "nop";
    human_readable[ 1] = "halt";
    human_readable[ 2] = "ret";
    human_readable[ 3] = "dup";
    human_readable[ 4] = "pop";
    human_readable[ 5] = "iadd";
    human_readable[ 6] = "read64";
    human_readable[ 7] = "write64";
    human_readable[ 8] = "";
    human_readable[ 9] = "pushb";
    human_readable[10] = "pushlocal";
    human_readable[11] = "writelocal";
    human_readable[12] = "";
    human_readable[13] = "jmp";
    human_readable[14] = "jeq";
    human_readable[15] = "jne";

    for let i: usize = 0; i < program_len; i += 1 {
        let instruction = *(program + i) as i32;
        let mnemonic = human_readable[instruction];

        let instruction = *(&instruction as *inst.Inst);
        if instruction < inst.Inst.OneOperandMarker {
            io.printf("%5d%12s\n", i, mnemonic);
        } else if instruction < inst.Inst.TwoOperandMarker  {
            let operand = *(program + i + 1);
            io.printf("%5d%12s%5d\n", i, mnemonic, operand as i32);
            i += 1; // skip operand
        } else {
            let operand1 = *(program + i + 1);
            let operand2 = *(program + i + 2);
            io.printf("%5d%12s%5d%5d\n", i, mnemonic, operand1 as i32, operand2 as i32);
            i += 2; // skip operands
        }
    }
}
