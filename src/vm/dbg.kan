import ":std/io";

import ":util";
import "inst";

def dump_bytecode_dbg(program: *u8, program_len: usize) {
    let human_readable: [40]*i8 = undefined;
    human_readable[inst.Inst.Nop         as i32] = "nop";
    human_readable[inst.Inst.Halt        as i32] = "halt";
    human_readable[inst.Inst.AllocLocals as i32] = "alloclocals";
    human_readable[inst.Inst.LocalPtr    as i32] = "localptr";
    human_readable[inst.Inst.ConstI8     as i32] = "i8.const";
    human_readable[inst.Inst.ConstI16    as i32] = "i16.const";
    human_readable[inst.Inst.ConstI32    as i32] = "i32.const";
    human_readable[inst.Inst.ConstI64    as i32] = "i64.const";
    human_readable[inst.Inst.Swap        as i32] = "swap";
    human_readable[inst.Inst.Dup         as i32] = "dup";
    human_readable[inst.Inst.Not         as i32] = "not";
    human_readable[inst.Inst.INeg        as i32] = "ineg";
    human_readable[inst.Inst.IAdd        as i32] = "iadd";
    human_readable[inst.Inst.ISub        as i32] = "isub";
    human_readable[inst.Inst.IMul        as i32] = "imul";
    human_readable[inst.Inst.IDiv        as i32] = "idiv";
    human_readable[inst.Inst.IMod        as i32] = "imod";
    human_readable[inst.Inst.BitAnd      as i32] = "bitand";
    human_readable[inst.Inst.BitOr       as i32] = "bitor";
    human_readable[inst.Inst.BitXor      as i32] = "bitxor";
    human_readable[inst.Inst.LShift      as i32] = "lsh";
    human_readable[inst.Inst.RShift      as i32] = "rsh";
    human_readable[inst.Inst.EQ          as i32] = "eq";
    human_readable[inst.Inst.NE          as i32] = "ne";
    human_readable[inst.Inst.ST          as i32] = "st";
    human_readable[inst.Inst.SE          as i32] = "se";
    human_readable[inst.Inst.GT          as i32] = "gt";
    human_readable[inst.Inst.GE          as i32] = "ge";
    human_readable[inst.Inst.BoolAnd     as i32] = "and";
    human_readable[inst.Inst.BoolOr      as i32] = "or";
    human_readable[inst.Inst.Load8       as i32] = "load8";
    human_readable[inst.Inst.Load16      as i32] = "load16";
    human_readable[inst.Inst.Load32      as i32] = "load32";
    human_readable[inst.Inst.Load64      as i32] = "load64";
    human_readable[inst.Inst.Store8      as i32] = "store8";
    human_readable[inst.Inst.Store16     as i32] = "store16";
    human_readable[inst.Inst.Store32     as i32] = "store32";
    human_readable[inst.Inst.Store64     as i32] = "store64";
    human_readable[inst.Inst.Jmp         as i32] = "jmp";
    human_readable[inst.Inst.Jif         as i32] = "jif";


    for let i: usize = 0; i < program_len; {
        let instruction = *(program + i) as i32;
        let mnemonic = human_readable[instruction];

        let instruction = *(&instruction as *inst.Inst);
        let width_bytes = instruction.width_bytes();
        let param_size = width_bytes - 1;

        if param_size == 0 {
            io.printf("%5x%15s\n", i, mnemonic);
        } else {
            let operand = util.read_int(program + i + 1, param_size);
            io.printf("%5x%15s%10x\n", i, mnemonic, operand);
        }


        i += width_bytes;
    }
}
