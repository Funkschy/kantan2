import ":std/io";
import ":std/dbg";
import ":std/libc";

import ":util";

import "inst" as _;

type Value union {
    bool: bool,
    u8: u8,
    u16: u16,
    u32: u32,
    u64: u64,
    usize: usize,

    i8: i8,
    i16: i16,
    i32: i32,
    i64: i64,
    isize: isize,

    ptr: *void
}

// The stack works like this:
// basically: when we enter a function, we allocate the memory for all the locals with correct
// alignment for each local on the stack (using the AllocLocals instruction)
// after that every push is 8 byte aligned, but the locals themselves don't need to be, since the
// load instructions can take care of that
//
// stackframe:
//  x: i32
//  padding
//  p: *i32
//  -----
//  stack: after pushing x and p
//  x: i64 <- after localptr 0 + load32
//  p: i64 <- after localptr 1 + loadptr
type VM struct {
    sp: usize,
    pc: usize,
    bp: usize, // base pointer <=> start of local variables

    stack: *u8,
    stack_size: usize,

    num_instr: usize,
    // too safe space, we represent the Inst values as a single byte
    program: *u8
}

def vm(stack_size: usize): VM {
    return VM {
        sp: 0,
        pc: 0,
        bp: 0,

        stack: libc.malloc(stack_size) as *u8,
        stack_size: stack_size,

        num_instr: 0,
        program: null
    };
}

def (vm: *VM) free() {
    delete vm.stack;
}

def (vm: *VM) load(program: *u8, program_len: usize) {
    vm.sp = vm.pc = vm.bp = 0;
    vm.program = program;
    vm.num_instr = program_len;
}

def (vm: *VM) read_inst(): Inst {
    let inst = *(vm.program + vm.pc) as i32;
    vm.pc += 1;
    return *(&inst as *Inst);
}

def (vm: *VM) read_operand(size_bytes: usize): u64 {
    let op = util.read_int(vm.program + vm.pc, size_bytes);
    vm.pc += size_bytes;
    return op;
}

def (vm: *VM) push(v: Value) {
    *((vm.stack + vm.sp) as *Value) = v;
    vm.sp += 8;
}

def (vm: *VM) pop(): Value {
    vm.sp -= 8;
    return *((vm.stack + vm.sp) as *Value);
}

def (vm: *VM) execute() {
    while vm.pc < vm.num_instr {
        let inst = vm.read_inst();

        if inst == Inst.Halt {
            break;
        } else if inst == Inst.AllocLocals {
            let operand = vm.read_operand(4) as usize;
            vm.sp += operand;

        } else if inst == Inst.LocalPtr {
            let operand = vm.read_operand(4) as usize;
            let value = Value { ptr: vm.stack as *void + vm.bp + operand };
            vm.push(value);

        } else if inst >= Inst.ConstI8  && inst <= Inst.ConstI64 {
            let offset = (inst as i32 - Inst.ConstI8 as i32) as usize;
            let operand = vm.read_operand(1 << offset) as u8;
            vm.push(Value { u64: operand as u64 });

        } else if inst == Inst.Dup {
            let value = (vm.stack + vm.sp - 8) as *Value;
            vm.push(*value);

        } else if inst == Inst.IAdd {
            let b = vm.pop();
            ((vm.stack + vm.sp - 8) as *Value).i64 += b.i64;
        } else if inst == Inst.ISub {
            let b = vm.pop();
            ((vm.stack + vm.sp - 8) as *Value).i64 -= b.i64;
        } else if inst == Inst.IMul {
            let b = vm.pop();
            ((vm.stack + vm.sp - 8) as *Value).i64 *= b.i64;
        } else if inst == Inst.IDiv {
            let b = vm.pop();
            ((vm.stack + vm.sp - 8) as *Value).i64 /= b.i64;
        } else if inst == Inst.IMod {
            let b = vm.pop();
            ((vm.stack + vm.sp - 8) as *Value).i64 %= b.i64;

        } else if inst == Inst.BitAnd {
            let b = vm.pop();
            let value = ((vm.stack + vm.sp - 8) as *Value).i64;
            ((vm.stack + vm.sp - 8) as *Value).i64 = value & b.i64;
        } else if inst == Inst.BitOr {
            let b = vm.pop();
            let value = ((vm.stack + vm.sp - 8) as *Value).i64;
            ((vm.stack + vm.sp - 8) as *Value).i64 = value | b.i64;
        } else if inst == Inst.BitXor {
            let b = vm.pop();
            let value = ((vm.stack + vm.sp - 8) as *Value).i64;
            ((vm.stack + vm.sp - 8) as *Value).i64 = value ^ b.i64;

        } else if inst == Inst.ST {
            let b = vm.pop();
            let value = ((vm.stack + vm.sp - 8) as *Value).i64;
            ((vm.stack + vm.sp - 8) as *Value).bool = value < b.i64;
        } else if inst == Inst.SE {
            let b = vm.pop();
            let value = ((vm.stack + vm.sp - 8) as *Value).i64;
            ((vm.stack + vm.sp - 8) as *Value).bool = value <= b.i64;
        } else if inst == Inst.GT {
            let b = vm.pop();
            let value = ((vm.stack + vm.sp - 8) as *Value).i64;
            ((vm.stack + vm.sp - 8) as *Value).bool = value > b.i64;
        } else if inst == Inst.GE {
            let b = vm.pop();
            let value = ((vm.stack + vm.sp - 8) as *Value).i64;
            ((vm.stack + vm.sp - 8) as *Value).bool = value >= b.i64;
        } else if inst == Inst.EQ {
            let b = vm.pop();
            let value = ((vm.stack + vm.sp - 8) as *Value).i64;
            ((vm.stack + vm.sp - 8) as *Value).bool = value == b.i64;
        } else if inst == Inst.NE {
            let b = vm.pop();
            let value = ((vm.stack + vm.sp - 8) as *Value).i64;
            ((vm.stack + vm.sp - 8) as *Value).bool = value != b.i64;

        } else if inst == Inst.BoolAnd {
            let b = vm.pop();
            ((vm.stack + vm.sp - 8) as *Value).bool &= b.bool;
        } else if inst == Inst.BoolOr {
            let b = vm.pop();
            ((vm.stack + vm.sp - 8) as *Value).bool |= b.bool;

        } else if inst == Inst.LShift {
            let b = vm.pop();
            let value = ((vm.stack + vm.sp - 8) as *Value).u64;
            ((vm.stack + vm.sp - 8) as *Value).u64 = value << b.u64;
        } else if inst == Inst.RShift {
            let b = vm.pop();
            let value = ((vm.stack + vm.sp - 8) as *Value).u64;
            ((vm.stack + vm.sp - 8) as *Value).u64 = value >> b.u64;

        } else if inst == Inst.Load8 {
            let ptr = vm.pop().ptr as *u8;
            vm.push(Value { u64: (*ptr) as u64 });
        } else if inst == Inst.Load16 {
            let ptr = vm.pop().ptr as *u16;
            vm.push(Value { u64: (*ptr) as u64 });
        } else if inst == Inst.Load32 {
            let ptr = vm.pop().ptr as *u32;
            vm.push(Value { u64: (*ptr) as u64 });
        } else if inst == Inst.Load64 {
            let ptr = vm.pop().ptr as *u64;
            vm.push(Value { u64: (*ptr) as u64 });

        } else if inst == Inst.Store8 {
            let ptr = vm.pop().ptr as *u8;
            *ptr = vm.pop().u8;
        } else if inst == Inst.Store16 {
            let ptr = vm.pop().ptr as *u16;
            *ptr = vm.pop().u16;
        } else if inst == Inst.Store32 {
            let ptr = vm.pop().ptr as *u32;
            *ptr = vm.pop().u32;
        } else if inst == Inst.Store64 {
            let ptr = vm.pop().ptr as *u64;
            *ptr = vm.pop().u64;

        } else if inst == Inst.Jmp {
            let target = vm.read_operand(8) as usize;
            vm.pc = target;

        } else if inst == Inst.Jif {
            let target = vm.read_operand(8) as usize;
            let condition = vm.pop().bool;

            if condition {
                vm.pc = target;
            }
        }
    }
}
