import "std/map";
import "std/dbg";
import "std/str";
import "std/num";
import "std/files/path";

import "cdeps";

import "source/ident";

type Result enum {
    OK, Error
}

def (r: Result) is_ok(): bool {
    return r == Result.OK;
}

def (r: Result) is_error(): bool {
    return r == Result.Error;
}

def (r: Result) or(other: Result): Result {
    if r.is_error() || other.is_error() {
        return Result.Error;
    }

    return Result.OK;
}

def read_int(bytes: *u8, width_bytes: usize): u64 {
    dbg.assert(width_bytes <= 8, "trying to read more than 8 bytes into an u64");

    let value: u64 = 0;
    for let i = width_bytes; i > 0; i -= 1 {
        value = (value << 8) | (*(bytes + i - 1) as u64);
    }
    return value;
}

def next_multiple_of_8(value: u64): u64 {
    return (value + 7) & -8;
}

def key_from_ident(i: ident.Ident): map.Key {
    return map.create_key(i.len(), i.start());
}

def key_from_path(p: path.Path): map.Key {
    return map.create_key(p.len, p.inner);
}

def key_from_view(s: str.View): map.Key {
    return map.create_key(s.len, s.data);
}

def int_from_char(c: i8, base: u32): i64 {
    if c >= '0' && c <= '9' {
        return c as i64 - '0';
    }

    let upper = c - 32 * ((c >= 'a' && c <= 'z') as i8);
    if upper >= 'A' && upper <= 'F' {
        return upper as i64 - 'A' + 10;
    }

    cdeps.assert_fmt(false, "invalid char '%c'", c);
    return 0;
}

def int_from_view(v: str.View, base: u32): i64 {
    dbg.assert(base == 10 || base == 16, "invalid base");
    dbg.assert(v.len > 0, "trying to parse empty string");

    let start = v.data;
    let len = v.len;

    let is_positive = true;
    if *start == '+' {
        start += 1;
        len -= 1;
    } else if *start == '-' {
        is_positive = false;
        start += 1;
        len -= 1;
    }

    // skip 0x, 0b etc
    if base != 10 {
        start += 2;
        len -= 2;
    }

    dbg.assert(len > 0, "trying to parse empty string");
    let value: i64 = 0;

    for let i = len as i64; i > 0; i -= 1 {
        let positional = num.pow(base as i64, len as i64 - i);
        value += positional * int_from_char(*(start + i - 1), base);
    }

    if !is_positive {
        return -value;
    }

    return value;
}

def [T] sizeof_val(v: *T): usize {
    return sizeof T;
}
