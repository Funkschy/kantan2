import "../std/vec";
import "../std/str";

import "../source/span";
import "../source/ident";

type TypeKind enum {
    Path,
    Ptr
}

// This represents user supplied type information
// Different ast.ty.Type instances could point to the same types.ty.Type even though they
// look different
type Type struct {
    kind: TypeKind,
    span: span.Span,
    data: TypeData
}

type TypeData struct {
    path: Path,
    ptr: Ptr
}

def init_path(memory: *Type) {
    memory.kind = TypeKind.Path;
    memory.data.path = Path { segments: vec.create(sizeof ident.Ident) };
}

def init_pointer(memory: *Type, inner: *Type) {
    memory.kind = TypeKind.Ptr;
    memory.data.ptr = Ptr { inner: inner };
}

def (t: *Type) free() {
    if t.kind == TypeKind.Path {
        t.data.path.segments.free();
    }
}

def (t: *Type) to_string(): str.String {
    if t.kind == TypeKind.Ptr {
        let star = str.from("*");

        let inner = t.data.ptr.inner.to_string();
        defer inner.free();
        star.push(inner.view());
        return star;
    }

    return t.data.path.to_string();
}

def (t: *Type) inner(): *Type {
    if t.kind == TypeKind.Ptr {
        return t.data.ptr.inner;
    }
    return null;
}

// a path is just a list of names connected by dots
// e.g. str.String -> ['str', 'String']
type Path struct {
    segments: vec.Vec // vec.Vec[ident.Ident]
}

def (p: *Path) push_segment(segment: ident.Ident) {
    p.segments.push(&segment as *void);
}

def (p: *Path) segment_at(idx: usize): *ident.Ident {
    return p.segments.get_ptr(idx) as *ident.Ident;
}

def (p: *Path) to_string(): str.String {
    let s = str.from("");
    for let i: usize = 0; i < p.segments.len; i += 1 {
        if i > 0 {
            s.push(str.view(".", 1));
        }
        let seg = p.segments.get_ptr(i) as *ident.Ident;
        s.push(seg.as_view());
    }
    return s;
}

type Ptr struct {
    inner: *Type
}
