import ":std/str";
import ":std/dbg";
import ":std/dbg";
import ":std/libc";
import ":std/ptrvec";

import ":source/span";
import ":source/ident";

import "tyid";
import "expr" as expr;

type StmtKind enum {
    Expr,
    Block,
    LocalVarDecl,
    Return,
    If
}

type Stmt struct {
    kind: StmtKind,
    span: span.Span,
    data: StmtData
}

type StmtData union {
    expr: expr.Expr,
    block: Block,
    local: LocalVarDecl,
    ret: *expr.Expr,
    ifelse: IfElse
}

def (s: *Stmt) init_expr() {
    s.kind = StmtKind.Expr;
}

def (s: *Stmt) init_block() {
    s.kind = StmtKind.Block;
    s.data.block.init();
}

def (s: *Stmt) init_var_decl() {
    s.kind = StmtKind.LocalVarDecl;
    s.data.local.ty = null;
    s.data.local.value = null;
}

def (s: *Stmt) init_return() {
    s.kind = StmtKind.Return;
    s.data.ret = null;
}

def (s: *Stmt) init_if() {
    s.kind = StmtKind.If;
    s.data.ifelse.condition = null;
    s.data.ifelse.if_block = null;
    s.data.ifelse.else_block = null;
}

def (s: *Stmt) free() {
    if s.kind == StmtKind.Block {
        s.data.block.free();
    }
}

type Block struct {
    // this only holds pointers to the statements and is not responsible for freeing them
    stmts: ptrvec.Vec
}

def (b: *Block) init() {
    b.stmts = ptrvec.create();
}

def (b: *Block) push(stmt: *Stmt) {
    b.stmts.push_ptr(stmt as *void);
}

def (b: *Block) at(idx: usize): *Stmt {
    return b.stmts.get(idx) as *Stmt;
}

def (b: *Block) len(): usize {
    return b.stmts.len;
}

def (b: *Block) free() {
    b.stmts.free();
}

type LocalVarDecl struct {
    name: ident.Ident,
    ty: *tyid.Type, // can be null
    value: *expr.Expr
}

type IfElse struct {
    condition: *expr.Expr,
    if_block: *Stmt,
    else_block: *Stmt // can be null
}

// to string/json stuff

def (b: *Block) to_json(): str.String {
    let json = str.from("{\"kind\": \"block\", \"stmts\": [");
    for let i: usize = 0; i < b.len(); i += 1 {
        if i > 0 {
            json.push(str.view(", ", 2));
        }

        let inner = b.at(i).to_json();
        defer inner.free();
        json.push(inner.view());
    }
    json.push(str.view_from("]}"));
    return json;
}

def (s: *Stmt) to_json(): str.String {
    if s.kind == StmtKind.Expr {
        let json = str.from("{\"kind\": \"expr_stmt\", \"expr\": ");
        let inner = s.data.expr.to_json();
        defer inner.free();
        json.push(inner.view());
        json.push(str.view_from("}"));
        return json;
    }

    if s.kind == StmtKind.LocalVarDecl {
        let local = &s.data.local;
        let json = str.from("{\"kind\": \"local_var_decl\", \"name\": \"");
        json.push(local.name.as_view());
        json.push(str.view_from("\", \"ty\": "));
        if local.ty != null {
            json.push(str.view_from("\""));
            defer json.push(str.view_from("\", "));

            let ty_s = local.ty.to_string();
            defer ty_s.free();
            json.push(ty_s.view());
        } else {
            json.push(str.view("null, ", 6));
        }

        json.push(str.view_from("\"value\": "));
        let value = local.value.to_json();
        defer value.free();
        json.push(value.view());
        json.push(str.view_from("}"));
        return json;
    }

    if s.kind == StmtKind.Return {
        let json = str.from("{\"kind\": \"return\", \"value\": ");
        if s.data.ret != null {
            let value = s.data.ret.to_json();
            json.push(value.view());
            value.free();
        } else {
            json.push(str.view("null", 4));
        }
        json.push(str.view_from("}"));
        return json;
    }

    if s.kind == StmtKind.If {
        let json = str.from("{\"kind\": \"if\", \"condition\": ");
        defer json.push(str.view_from("}"));

        let value = s.data.ifelse.condition.to_json();
        json.push(value.view());
        value.free();

        json.push(str.view_from(", \"if_block\": "));
        let if_block = s.data.ifelse.if_block.to_json();
        json.push(if_block.view());
        if_block.free();

        json.push(str.view_from(", \"else_block\": "));
        if s.data.ifelse.else_block != null {
            let else_block = s.data.ifelse.else_block.to_json();
            json.push(else_block.view());
            else_block.free();
        } else {
            json.push(str.view("null", 4));
        }

        return json;
    }

    if s.kind == StmtKind.Block {
        return s.data.block.to_json();
    }

    return str.from("{\"kind\": \"error\", \"value\": {}}");
}

