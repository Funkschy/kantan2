import "../std/str";
import "../std/ptrvec";

import "../ast/item";
import "../source/file" as sf;

type Module struct {
    // the stdlib may sometimes behave differently
    is_std_lib: bool,
    file: sf.SourceFile,
    items: ptrvec.Vec // ptrvec.Vec[*item.Item]
}

def (memory: *Module) init(is_std_lib: bool) {
    memory.is_std_lib = false;
    memory.items = ptrvec.create();
    // file is added later
}

def (m: *Module) free() {
    m.file.free();
    m.items.free();
}

def (m: *Module) to_json(): str.String {
    let json = str.from("{\"kind\": \"module\", \"path\": \"");
    json.push(m.file.absolute_path().as_view());
    json.push(str.view_from("\", \"items\": ["));

    for let i: usize = 0; i < m.items.len; i += 1 {
        if i > 0 {
            json.push(str.view(", ", 2));
        }

        let item = m.item_at(i);
        let item_json = item.to_json();
        json.push(item_json.view());
        item_json.free();
    }

    json.push(str.view("]}", 2));
    return json;
}

def (m: *Module) num_items(): usize {
    return m.items.len;
}

def (m: *Module) item_at(idx: usize): *item.Item {
    return m.items.get(idx) as *item.Item;
}
