import ":std/str";
import ":std/ptrvec";

import ":source/span";
import ":source/ident";

import ":types/types" as ty;
import ":types/instances" as i;

import "stmt";
import "signature" as sig;

// Import declarations aren't Items, since they cannot occur at an arbitrary position inside
// the file. All imports have to be decared at the top of the file, before any other ast.Item
// This makes it easy to determine the dependencies of a single module before we even parse the
// entire file.
type ImportDeclaration struct {
    path: ident.Ident,
    alias: ident.Ident
}

type ItemKind enum {
    FuncDef
}

// a single item inside the ast. Items can occur at an arbitrary place inside a module, including
// the top level
type Item struct {
    kind: ItemKind,
    span: span.Span,
    // the name of the item or ident.empty() for nameless items
    name: ident.Ident,
    data: ItemData
}

type ItemData union {
    func_def: FuncDef
}

def (i: *Item) init_func_def() {
    i.kind = ItemKind.FuncDef;
    i.data.func_def.sig.init();
    i.data.func_def.instances.init();
    i.data.func_def.block_stmt.init_block();
}

def (i: *Item) free() {
    if i.kind == ItemKind.FuncDef {
        i.data.func_def.free();
    }
}

type FuncDef struct {
    sig: sig.Signature,
    // the type instances of this function
    // if this is a normal function (no generic parameters) this will only contain one type
    // otherwise, the amount of instances will depend on the number of distinct types
    // this template was invoked with
    instances: i.InstanceSet,
    block_stmt: *stmt.Stmt
}

def (f: *FuncDef) block(): *stmt.Block {
    return &f.block_stmt.data.block;
}

def (f: *FuncDef) free() {
    f.sig.free();
    f.instances.free();
}

def (i: *Item) to_json(): str.String {
    if i.kind == ItemKind.FuncDef {
        let f = &i.data.func_def;

        let json = str.from("{\"kind\": \"func_def\", \"name\": \"");
        json.push(i.name.as_view());
        json.push(str.view_from("\","));

        json.push(str.view_from("\"instances\": ["));
        for let i: usize = 0; i < f.instances.len(); i += 1 {
            if i > 0 {
                json.push(str.view_from(","));
            }

            let instance = f.instances.get(i).to_string();
            json.push(str.view_from("\""));
            json.push(instance.view());
            json.push(str.view_from("\""));
            instance.free();
        }
        json.push(str.view_from("],"));

        json.push(str.view_from("\"body\": "));
        let inner = f.block_stmt.to_json();
        defer inner.free();
        json.push(inner.view());

        json.push(str.view_from("}"));
        return json;
    }

    return str.from("{\"kind\": \"error\", \"value\": {}}");
}
