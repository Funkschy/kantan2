import "../std/vec";

import "../source/span";
import "../source/ident";

import "tyid";

type Modifier struct {
    // if the span is empty => not extern etc.
    // the span may be needed for error messages, so we use it instead of a bool
    extern_span: span.Span,
    export_span: span.Span
}

type Param struct {
    name: ident.Ident,
    ty: *tyid.Type
}

def param(name: ident.Ident, ty: *tyid.Type): Param {
    return Param {
        name: name, ty: ty
    };
}

type ReturnType struct {
    // the ty can be null, if the return type was emitted. In this case, the span points to the ')'
    // at the end of the parameters. If the return type was present, this span is the same as
    // ty.span
    span: span.Span,
    ty: *tyid.Type
}

def empty_return(closing_rparen_span: span.Span): ReturnType {
    return ReturnType { span: closing_rparen_span, ty: null };
}

def return_from_tyid(ty: *tyid.Type): ReturnType {
    return ReturnType { span: ty.span, ty: ty };
}

type Signature struct {
    modifier: Modifier,
    params: vec.Vec, // ptrvec.Vec[Param]
    ret: ReturnType
}

def (s: *Signature) init() {
    // the vector needs to be initialized in order to be freed
    s.params = vec.create(sizeof Param);
    s.ret.ty = null;
}

def (s: *Signature) free() {
    s.params.free();
}

def (s: *Signature) param_at(idx: usize): *Param {
    return s.params.get_ptr(idx) as *Param;
}
