import "../std/str";
import "../std/dbg";
import "../util";

import "../source/span";
import "../source/ident";
import "../types/types" as ty;

import "token" as tok;

type ExprKind enum {
    Literal,
    Binary,
    Unary,
    Ident,
    Assign,
    Call
}

type Expr struct {
    kind: ExprKind,
    span: span.Span,
    data: ExprData
}

type ExprData union {
    lit: Literal,
    binary: BinaryExpr,
    unary: UnaryExpr,
    ident: IdentExpr,
    assign: AssignExpr,
    call: CallExpr
}

def (e: *Expr) init_basic(kind: ExprKind) {
    e.kind = kind;
}

def (e: *Expr) init_lit(token: tok.Token) {
    e.init_basic(ExprKind.Literal);
    e.span = token.span;
    e.data = ExprData { lit: Literal { kind: undefined, token: token } };

    let kind_value = token.ty as i32 - tok.TokenType.DecInt as i32;
    e.data.lit.kind = *(&kind_value as *LiteralKind);
}

def (e: *Expr) init_binary(kind: BinaryKind, left: *Expr, right: *Expr, op: span.Span) {
    e.init_basic(ExprKind.Binary);
    e.span = left.span.merge(right.span);
    e.data = ExprData {
        binary: BinaryExpr {
            kind: kind,
            op_span: op,
            left: left,
            right: right
        }
    };
}

def (e: *Expr) init_unary(kind: UnaryKind, tok: tok.Token, right: *Expr) {
    e.init_basic(ExprKind.Unary);
    e.span = tok.span.merge(right.span);
    e.data = ExprData { unary: UnaryExpr { kind: kind, right: right } };
}

def (e: *Expr) init_ident(name: ident.Ident) {
    e.init_basic(ExprKind.Ident);
    e.span = name.span;
    e.data = ExprData { ident: IdentExpr { name: name, ty: null } };
}

def (e: *Expr) init_assign(kind: AssignKind, left: *Expr, right: *Expr) {
    e.init_basic(ExprKind.Assign);
    e.span = left.span.merge(right.span);
    e.data = ExprData { assign: AssignExpr { kind: kind, left: left, right: right } };
}

def (e: *Expr) init_call(callee: *Expr) {
    e.init_basic(ExprKind.Call);
    e.span = callee.span;
    e.data = ExprData { call: CallExpr { callee: callee, num_args: 0, args_head: null } };
}

// the ExprNode is a Node in a singly linked list. This is needed since each Expr gets allocated
// inside an arena, which would make freeing a vector inside an expression tedious.
// Linked Lists are way easier to handle and don't really have any overhead here, since
// the expressions will most likely be sequential in memory anyway due to the arena
type ExprNode struct {
    value: Expr,
    next: *ExprNode // may be null
}

// note: these have to be aligned with ast/token/TokenType
type LiteralKind enum {
    DecInt,
    HexInt,
    Float,
    String,
    Char,
    Null,
    Undefined
}

type Literal struct {
    kind: LiteralKind,
    token: tok.Token // the original token
}

type IdentExpr struct {
    name: ident.Ident,
    // the type of the ident will be inserted during type checking
    ty: *ty.Type
}

type UnaryKind enum {
    Deref, AddrOf, NumNegate, BoolNegate
}

type UnaryExpr struct {
    kind: UnaryKind,
    right: *Expr
}

type BinaryKind enum {
    Add, Sub, Mul, Div, Mod
}

def (k: BinaryKind) with_offset(offset: i32): BinaryKind {
    dbg.assert(k as i32 + offset <= BinaryKind.Mod as i32, "offset too large");
    let next = k as i32 + offset;
    return *(&next as *BinaryKind);
}

type BinaryExpr struct {
    kind: BinaryKind,
    op_span: span.Span,
    left: *Expr,
    right: *Expr
}

type AssignKind enum {
    Eq,
    AddEq,
    MinusEq,
    MulEq,
    DivEq,
    ModEq,
    BinAddEq,
    BinOrEq,
    BinXorEq
}

def (k: AssignKind) with_offset(offset: i32): AssignKind {
    dbg.assert(k as i32 + offset <= AssignKind.BinXorEq as i32, "offset too large");
    let next = k as i32 + offset;
    return *(&next as *AssignKind);
}


type AssignExpr struct {
    kind: AssignKind,
    left: *Expr,
    right: *Expr
}

type CallExpr struct {
    callee: *Expr,
    num_args: usize,
    args_head: *ExprNode
}

// ------------ to string/json stuff ------------

let _binary_kind_strings: [5]str.View = undefined;
// TODO: change this to 'false' when global variables work correctly
let  _binary_kind_strings_initialized: bool = undefined;

def (k: BinaryKind) as_view(): str.View {
    if !_binary_kind_strings_initialized {
        _binary_kind_strings[BinaryKind.Add as i32] = str.view("+", 1);
        _binary_kind_strings[BinaryKind.Sub as i32] = str.view("-", 1);
        _binary_kind_strings[BinaryKind.Mul as i32] = str.view("*", 1);
        _binary_kind_strings[BinaryKind.Div as i32] = str.view("/", 1);
        _binary_kind_strings[BinaryKind.Mod as i32] = str.view("%", 1);
        _binary_kind_strings_initialized = true;
    }

    return _binary_kind_strings[k as i32];
}

let _unary_kind_strings: [4]str.View = undefined;
// TODO: change this to 'false' when global variables work correctly
let  _unary_kind_strings_initialized: bool = undefined;

def (k: UnaryKind) as_view(): str.View {
    if !_unary_kind_strings_initialized {
        _unary_kind_strings[UnaryKind.Deref as i32] = str.view("*", 1);
        _unary_kind_strings[UnaryKind.AddrOf as i32] = str.view("&", 1);
        _unary_kind_strings[UnaryKind.NumNegate as i32] = str.view("-", 1);
        _unary_kind_strings[UnaryKind.BoolNegate as i32] = str.view("!", 1);
    }

    return _unary_kind_strings[k as i32];
}

let _assign_kind_strings: [9]str.View = undefined;
// TODO: change this to 'false' when global variables work correctly
let  _assign_kind_strings_initialized: bool = undefined;

def (k: AssignKind) as_view(): str.View {
    if !_assign_kind_strings_initialized {
        _assign_kind_strings[AssignKind.Eq as i32] = str.view("=", 1);
        _assign_kind_strings[AssignKind.AddEq as i32] = str.view("+=", 2);
        _assign_kind_strings[AssignKind.MinusEq as i32] = str.view("-=", 2);
        _assign_kind_strings[AssignKind.MulEq as i32] = str.view("*=", 2);
        _assign_kind_strings[AssignKind.DivEq as i32] = str.view("/=", 2);
        _assign_kind_strings[AssignKind.ModEq as i32] = str.view("%=", 2);
        _assign_kind_strings[AssignKind.BinAddEq as i32] = str.view("&=", 2);
        _assign_kind_strings[AssignKind.BinOrEq as i32] = str.view("|=", 2);
        _assign_kind_strings[AssignKind.BinXorEq as i32] = str.view("^=", 2);
        _assign_kind_strings_initialized = true;
    }

    return _assign_kind_strings[k as i32];
}

def (e: *Expr) to_json(): str.String {
    if e.kind == ExprKind.Ident {
        let json = str.from("{\"kind\": \"identifier\", \"value\": ");
        json.push(str.view_from("\""));
        json.push(e.data.ident.name.as_view());
        json.push(str.view_from("\","));
        json.push(str.view_from("\"ty\": \""));
        let ty = e.data.ident.ty.to_string();
        defer ty.free();
        json.push(ty.view());
        json.push(str.view_from("\"}"));
        return json;
    }

    if e.kind == ExprKind.Literal {
        let json = str.from("{\"kind\": \"literal\", \"value\": ");
        let view = e.data.lit.token.span.as_view();

        let kind = e.data.lit.kind;
        if kind == LiteralKind.HexInt {
            // since json can't handle hex literals, we need to convert them to decimal
            let value = util.int_from_view(view, 16);
            let value = str.i64_to_string(value);
            defer value.free();
            json.push(value.view());
        } else if kind < LiteralKind.String {
            json.push(view);
        } else {
            json.push(str.view_from("\""));
            json.push(view);
            json.push(str.view_from("\""));
        }

        json.push(str.view_from("}"));
        return json;
    }

    if e.kind == ExprKind.Binary {
        let json = str.from("{\"kind\": \"binary\", ");
        let left = e.data.binary.left.to_json();
        defer left.free();
        json.push(str.view_from("\"left\": "));
        json.push(left.view());
        json.push(str.view_from(", \"op\": \""));
        json.push(e.data.binary.kind.as_view());
        json.push(str.view_from("\", "));
        let right = e.data.binary.right.to_json();
        defer right.free();
        json.push(str.view_from("\"right\": "));
        json.push(right.view());
        json.push(str.view_from("}"));
        return json;
    }

    if e.kind == ExprKind.Unary {
        let json = str.from("{\"kind\": \"unary\", ");
        json.push(str.view_from("\"op\": \""));
        json.push(e.data.unary.kind.as_view());
        json.push(str.view_from("\", \"right\": "));
        let right = e.data.unary.right.to_json();
        defer right.free();
        json.push(right.view());
        json.push(str.view_from("}"));
        return json;
    }

    if e.kind == ExprKind.Assign {
        let json = str.from("{\"kind\": \"assign\", ");
        let left = e.data.assign.left.to_json();
        defer left.free();
        json.push(str.view_from("\"left\": "));
        json.push(left.view());
        json.push(str.view_from(", \"op\": \""));
        json.push(e.data.assign.kind.as_view());
        json.push(str.view_from("\", "));
        let right = e.data.assign.right.to_json();
        defer right.free();
        json.push(str.view_from("\"right\": "));
        json.push(right.view());
        json.push(str.view_from("}"));
        return json;
    }

    if e.kind == ExprKind.Call {
        let json = str.from("{\"kind\": \"call\", ");
        let callee = e.data.call.callee.to_json();
        defer callee.free();
        json.push(str.view_from("\"callee\": "));
        json.push(callee.view());

        json.push(str.view_from(",\"args\": ["));
        let current = e.data.call.args_head;
        let first = true;
        while current != null {
            if !first {
                json.push(str.view_from(","));
            }
            first = false;
            let arg = current.value.to_json();
            defer arg.free();
            json.push(arg.view());
            current = current.next;
        }
        json.push(str.view_from("]}"));
        return json;
    }

    return str.from("{\"kind\": \"error\", \"value\": {}}");
}
