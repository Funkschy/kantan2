import ":std/str";
import ":std/dbg";
import ":std/files/path";

import "ast/mod";
import "ast/tyid";
import "ast/item";
import "ast/expr";
import "ast/lexer" as lex;
import "ast/parser" as parse;

import "types/ctx";
import "types/types";
import "types/graph";
import "types/check/item" as item_check;
import "types/finalize/item" as item_finalize;
import "types/resolve/functions" as resolve_functions;

import "cli/config";
import "cli/report";

import "memory/arena";
import "source/span";
import "source/modmap" as mods;

import "cdeps";
import "error" as e;
import "util" as _;

// the main data structure for the compiler
// this holds all of the memory for types and the ast
// so if we need to keep data alive for the entire lifetime of the program, it goes here
type Compiler struct {
    cwd: path.Buf,
    std_path: path.Path,
    config: *config.Config,
    modmap: mods.Map,

    mod_arena: arena.TypedArena,
    item_arena: arena.TypedArena,
    tyid_arena: arena.TypedArena,
    expr_arena: arena.TypedArena,
    node_arena: arena.TypedArena,

    type_arena: arena.TypedArena,
    type_node_arena: arena.TypedArena,

    // this will only be initialized when config.generate_type_graph is set to true
    // otherwise it will contain uninitialized memory!
    type_graph: graph.TypeGraph
}

def compiler(config: *config.Config): Compiler {
    return Compiler {
        cwd: path.get_cwd(),
        std_path: find_stdlib_path(),
        config: config,
        modmap: mods.filemap(),
        mod_arena: arena.typed(sizeof mod.Module),
        item_arena: arena.typed(sizeof item.Item),
        tyid_arena: arena.typed(sizeof tyid.Type),
        expr_arena: arena.typed(sizeof expr.Expr),
        node_arena: arena.typed(sizeof expr.ExprNode),
        type_arena: arena.typed(sizeof types.Type),
        type_node_arena: arena.typed(sizeof types.TypeNode),
        type_graph: undefined
    };
}

def (c: *Compiler) read_files(): Result {
    let result = Result.OK;
    for let i: usize = 0; i < c.config.files.len; i += 1 {
        let filepath = path.create(c.config.files.get(i) as string);
        result = result.or(c.add_file(filepath, false, null));
    }
    return result;
}

// try to add a single file to the modmap
// it is also possible to supply an error note which will be displayed in case the file
// could not be added
def (c: *Compiler) add_file(filepath: path.Path, stdlib: bool, note: *e.ErrorNote): Result {
    let cwd = c.cwd.as_path();
    let mod = c.mod_arena.alloc() as *mod.Module;
    mod.init(stdlib);

    c.modmap.add_file(cwd, filepath, mod);

    if mod.file.is_error() {
        report.print_file_error(&mod.file, note);
        mod.free();
        return Result.Error;
    }

    return Result.OK;
}

def (c: *Compiler) resolve_import_path(
    imported: path.Path,
    relative_to: path.Path,
    full_imported_path: *path.Buf,
    is_std_lib: *bool
): path.Result {
    // try to resolve the imported path relative to the parent of the current file, so
    // e.g. if we are in /etc/test.kan and import "../root", we will try to
    // resolve /root.kan
    let result = relative_to.merge_abs_rel_suffix(&imported, ".kan", full_imported_path);
    if result.is_ok() {
        *is_std_lib = false;
        return result;
    }

    *is_std_lib = true;
    // if the first try failed, we try to resolve the import inside the stdlib instead
    return c.std_path.merge_abs_rel_suffix(&imported, ".kan", full_imported_path);
}

def (c: *Compiler) resolve_imports(): Result {
    let resolve_result = Result.OK;

    for let i: usize = 0; i < c.modmap.len(); i += 1 {
        let mod = c.modmap.at(i);

        let parser = parse.create(
            lex.create(mod.file.code()),
             &c.item_arena,
             &c.tyid_arena,
             &c.expr_arena,
             &c.node_arena
         );

        // we iterate over all the imports first, since they need to be at the top of the file
        // while resolving the imports, we keep track of all imported modules
        let parsed_import = parser.parse_next_import();
        while parsed_import.is_present || parsed_import.was_error {
            defer parsed_import = parser.parse_next_import();

            if parsed_import.was_error {
                // we don't want to immediately quit on an erroneous import, since we want to
                // try to report all errors
                resolve_result = Result.Error;
                continue;
            }

            let decl = &parsed_import.import_decl;

            // imports are resolved relative to the current file by default
            let relative_to = mod.file.absolute_path().parent();
            let imported = path.from_view(decl.path.as_view());

            let full_imported_path: path.Buf = undefined;
            let is_std_lib = false;

            let result = c.resolve_import_path(
                imported, relative_to, &full_imported_path, &is_std_lib
            );
            if result.is_error() {
                report_import_error(result, relative_to, imported, decl.path.span);
                resolve_result = Result.Error;
                continue;
            }

            // only free this, if the result was no error
            defer full_imported_path.free();

            let full_imported_path = full_imported_path.as_path();
            let imported_module = c.modmap.get_mod(full_imported_path);
            if imported_module == null {
                // an additional note to produce a better error message in case we could not add
                // the module
                let note = e.note(str.view("imported here", 13), decl.path.span);

                // try to add the imported file to the modmap, if this fails, we bail
                if c.add_file(full_imported_path, is_std_lib, &note).is_error() {
                    resolve_result = Result.Error;
                    continue;
                }

                imported_module = c.modmap.get_mod(full_imported_path);
                // this shouldn't happen, since we should've bailed if the file couldn't be added
                dbg.assert(imported_module != null, "internal modmap error");
            }


            // at this point we can be sure, that the module does exist and was added to the modmap
            // so we can mark it as imported
            // all modules, that were never imported (apart from the main module) are removed before
            // type checking
            // TODO(#5): actually remove unused imports
            c.modmap.mark_imported(full_imported_path);

            // check for self import
            // import cycles are actually allowed, so this wouldn't be a real issue, but since
            // a self import is never needed, we report an error anyway
            if imported_module == mod {
                let error = e.simple_error(e.ErrorKind.SelfImport, decl.path.span);
                report.print_error(&error);
                resolve_result = Result.Error;
                continue;
            }

            mod.add_import(imported_module, decl.alias);
        }

        // since the parser is more or less stateless, it's sufficient to save the lexer
        // this is needed in order to continue parsing at the same statement we left
        c.modmap.save_state_for(i, parser.lexer);

    }

    // while resolving the imports, we keep track of the modules, that were actually imported.
    // At this point all legal imports have been parsed. If we encounter any more, they should
    // be reported as parse errors

    return resolve_result;
}

def (c: *Compiler) parse(): Result {
    let had_errors = false;

    for let i: usize = 0; i < c.modmap.len(); i += 1 {
        let info = c.modmap.info_at(i);
        let mod = info.module;

        let parser = parse.create(info.lexer, &c.item_arena, &c.tyid_arena, &c.expr_arena, &c.node_arena);
        while !parser.is_at_end() {
            let parsed_item = parser.parse_item();
            if parsed_item != null {
                mod.items.push_ptr(parsed_item as *void);
            } else {
                had_errors = true;
            }
        }
    }

    if had_errors {
        return Result.Error;
    }

    return Result.OK;
}

def (c: *Compiler) resolve_types(): Result {
    if c.config.generate_type_graph {
        c.type_graph = graph.type_graph();
    }
    return Result.OK;
}

def (c: *Compiler) infer_and_check_types(): Result {
    let ctx = ctx.create(&c.type_arena, &c.type_node_arena);
    defer ctx.free();

    let result = Result.OK;
    for let i: usize = 0; i < c.modmap.len(); i += 1 {
        let mod = c.modmap.at(i);
        ctx.open_scope();
        defer ctx.close_scope();

        // resolve all the functions in the module
        // we need to do this before checking the function bodys in order to be able to call
        // functions that are declared below the function we are in
        for let j: usize = 0; j < mod.num_items(); j += 1 {
            let item = mod.item_at(j);
            result = result.or(resolve_functions.resolve(&ctx, item));
        }

        // actually check the function bodys
        for let j: usize = 0; j < mod.num_items(); j += 1 {
            let item = mod.item_at(j);
            result = result.or(item_check.check(&ctx, item));
        }
    }

    if result.is_error() {
        return result;
    }

    // finalize the types. During typechecking we generate a lot of Type Variables, which are
    // basically just pointers to another type. Since these are an annoying edge case, we want
    // to remove them. We also collapse anyInt -> i32, anyFloat -> f32 and report uninfered types
    // in this step
    // FIXME: add missing branches
    // TODO: we need to mark i32 and f32 as moved before finalizing
    for let i: usize = 0; i < c.modmap.len(); i += 1 {
        let mod = c.modmap.at(i);

        for let j: usize = 0; j < mod.num_items(); j += 1 {
            let item = mod.item_at(j);
            result = result.or(item_finalize.finalize(&ctx, item));
        }
    }

    return result;
}

def report_import_error(
    result: path.Result,
    relative_to: path.Path,
    imported_path: path.Path,
    span: span.Span
) {
    let error_msg = result.to_string(imported_path);
    defer error_msg.free();

    let error = e.string_single(e.ErrorKind.CouldNotImport, span, error_msg.view());

    let note_string = str.from("");
    defer note_string.free();

    let note: e.ErrorNote = undefined;
    // in this case, we add an additional note, to make it clear, which path was actually searched
    if result == path.Result.FileNotFound {
        note_string.push(str.view("the resolved path was '", 23));
        note_string.push(relative_to.as_view());
        note_string.push(imported_path.as_view());
        note_string.push(str.view(".kan'", 5));
        note = e.simple_note(note_string.view());
        error.note = &note;
    }

    report.print_error(&error);
}

def (c: *Compiler) free() {
    c.cwd.free();
    c.modmap.free();

    c.mod_arena.free();
    c.expr_arena.free();
    c.node_arena.free();
    c.item_arena.free_destructor(&item.Item.free as arena.Destructor);
    c.tyid_arena.free_destructor(&tyid.Type.free as arena.Destructor);
    c.type_arena.free();
    c.type_node_arena.free();

    if c.config.generate_type_graph {
        c.type_graph.free();
    }
}

def find_stdlib_path(): path.Path {
    let install_dir = cdeps.get_stdlib_directory();
    return path.create(install_dir);
}
