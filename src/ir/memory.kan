import ":std/str";
import ":std/dbg";
import ":std/vec";
import ":types/types" as ty;

// Memory Locations

type LocationKind enum {
    Local, Global
}

type Location struct {
    kind: LocationKind,
    data: LocationData,
    projection_head: *ProjectionNode
}

type LocationData union {
    local: Local,
    global: Global
}

def (l: *Location) to_json(): str.String {
    if l.kind == LocationKind.Local {
        let json = str.from("{\"kind\": \"local\", \"name\": \"");
        defer json.push(str.view("}", 1));

        let name = l.data.local.to_string();
        json.push(name.view());
        name.free();

        json.push(str.view_from("\", \"projections\": ["));
        defer json.push(str.view("]", 1));

        let p = l.projection_head;
        while p != null {
            let proj = p.value;

            if p != l.projection_head {
                json.push(str.view(", ", 2));
            }

            if proj.kind == ProjectionKind.Field {
                dbg.assert(false, "unhandled projection kind field");
            } else if proj.kind == ProjectionKind.Index {
                dbg.assert(false, "unhandled projection kind index");
            } else if proj.kind == ProjectionKind.Deref {
                json.push(str.view_from("{\"kind\": \"deref\"}"));
            }

            p = p.next;
        }
        return json;
    }

    dbg.assert(false, "unhandled location kind");
    return undefined;
}

type Local struct {
    idx: usize
}

def local(idx: usize): Local {
    return Local { idx: idx };
}

def (l: Local) to_string(): str.String {
    let s = str.from("_");
    let idx_s = str.i64_to_string(l.idx as i64);
    s.push(idx_s.view());
    idx_s.free();
    return s;
}

def (l: Local) as_location(): Location {
    return Location {
        kind: LocationKind.Local,
        data: LocationData {
            local: l
        },
        projection_head: null
    };
}

type Global struct {
    idx: usize
}

type ProjectionKind enum {
    Field, Index, Deref
}

type Projection struct {
    kind: ProjectionKind,
    data: ProjectionData
}

type ProjectionData union {
    field: Field,
    index: Local
    // deref does not need any data
}

type ProjectionNode struct {
    value: Projection,
    next: *ProjectionNode
}

def deref(): Projection {
    return Projection {
        kind: ProjectionKind.Deref,
        data: undefined
    };
}

type Field struct {
    idx: usize,
    ty: *ty.Type
}

