import ":std/str";
import ":std/dbg";
import ":std/vec";
import ":std/map";

import ":ast/mod";
import ":ast/item" as ast;

import ":util" as _;
import ":memory/arena";
import ":source/ident";
import ":types/types" as ty;

import "ir";
import "const";
import "rvalue";
import "memory";

import "compile/locals";
import "compile/escape";

type StringLiteral struct {
    value: str.String,
    next: *StringLiteral
}

def (lit: *StringLiteral) free() {
    lit.value.free();
}

type IRCtx struct {
    names: locals.NameTable,
    current_function: *ir.Function,

    functions: map.Map, // map.Map[*ir.Function], the functions are allocated in function_arena
    function_arena: *arena.TypedArena,

    string_literal_head: *StringLiteral,
    string_literal_arena: *arena.TypedArena,

    projection_arena: *arena.TypedArena,
    switch_case_arena: *arena.TypedArena
}

def create(
    function_arena: *arena.TypedArena,
    string_literal_arena: *arena.TypedArena,
    proj_arena: *arena.TypedArena,
    case_arena: *arena.TypedArena,
    mod: *mod.Module
): IRCtx {
    dbg.assert(function_arena.elem_size == sizeof ir.Function, "wrong function arena size");
    dbg.assert(string_literal_arena.elem_size == sizeof StringLiteral, "wrong string_literal_arena size");
    dbg.assert(proj_arena.elem_size == sizeof memory.ProjectionNode, "wrong projection_arena size");
    dbg.assert(case_arena.elem_size == sizeof memory.ProjectionNode, "wrong case_arena size");

    // this is a good guess, since most of the items in a module will be functions
    let functions = map.with_cap(mod.num_items());

    for let i: usize = 0; i < mod.num_items(); i += 1 {
        let item = mod.item_at(i);
        if item.kind == ast.ItemKind.FuncDef {
            let f = &item.data.func_def;
            let f_ty = f.instances.get(0);
            let function = (function_arena.alloc() as *ir.Function).init_def(item.name, f_ty);
            functions.insert(key_from_ident(item.name), function as *void);
        }
    }


    return IRCtx {
        names: locals.create(),
        current_function: null,
        functions: functions,
        function_arena: function_arena,
        string_literal_head: null,
        string_literal_arena: string_literal_arena,
        projection_arena: proj_arena,
        switch_case_arena: case_arena
    };
}

def (ctx: *IRCtx) free() {
    ctx.names.free();
    ctx.functions.free();
}

def (ctx: *IRCtx) alloc_function(): *ir.Function {
    return ctx.function_arena.alloc() as *ir.Function;
}

def (ctx: *IRCtx) set_current_function(name: ident.Ident, ty: *ty.Type) {
    ctx.names.free();
    ctx.names = locals.create();
    let function = ctx.functions.get(key_from_ident(name)) as *ir.Function;
    dbg.assert(function != null, "trying to set non existing function");

    ctx.current_function = function;
}

def (ctx: *IRCtx) push_stmt(stmt: *ir.Statement) {
    let f = ctx.current_function;
    let bb = f.current_bb();
    bb.push_stmt(stmt);
}

def (ctx: *IRCtx) push_nop_stmt() {
    let f = ctx.current_function;
    let bb = f.current_bb();
    let nop = ir.nop_stmt();
    bb.push_stmt(&nop);
}

def (ctx: *IRCtx) current_bb_is_terminated(): bool {
    let f = ctx.current_function;
    let bb = f.current_bb();
    return bb.terminator.kind != ir.TerminatorKind.Nop;
}

def (ctx: *IRCtx) current_bb_is_empty(): bool {
    let f = ctx.current_function;
    let bb = f.current_bb();
    if bb.terminator.kind != ir.TerminatorKind.Nop {
        return false;
    }

    return bb.num_statements() == 0;
}

def (ctx: *IRCtx) current_bb_is_nop(): bool {
    let f = ctx.current_function;
    let bb = f.current_bb();
    if bb.terminator.kind != ir.TerminatorKind.Nop {
        return false;
    }

    if bb.num_statements() == 0 {
        return false;
    }

    for let i: usize = 0; i < bb.num_statements(); i += 1 {
        if bb.statement_at(i).kind != ir.StatementKind.Nop {
            return false;
        }
    }

    return true;
}

def (ctx: *IRCtx) current_bb(): usize {
    let f = ctx.current_function;
    return f.current_bb().id;
}

def (ctx: *IRCtx) terminate_current() {
    let f = ctx.current_function;
    let nop = ir.nop_terminator();
    f.terminate_current(&nop);
}

def (ctx: *IRCtx) push_terminator(terminator: *ir.Terminator) {
    let f = ctx.current_function;
    f.terminate_current(terminator);
}

def (ctx: *IRCtx) set_terminator(bb: usize, terminator: *ir.Terminator) {
    let f = ctx.current_function;
    let bb = f.bb_at(bb);
    dbg.assert(bb != null, "trying to set terminator for invalid bb");

    bb.terminator = *terminator;
}

def (ctx: *IRCtx) set_terminator_if_nop(bb: usize, terminator: *ir.Terminator) {
    let f = ctx.current_function;
    let bb = f.bb_at(bb);
    dbg.assert(bb != null, "trying to set terminator for invalid bb");

    if bb.terminator.kind != ir.TerminatorKind.Nop {
        return;
    }

    bb.terminator = *terminator;
}

def (ctx: *IRCtx) switch_case_default(target_bb_id: usize): *ir.SwitchCase {
    let case = ctx.switch_case_arena.alloc() as *ir.SwitchCase;
    case.otherwise = true;
    case.value = 0;
    case.target = target_bb_id;
    case.next = null;
    return case;
}

def (ctx: *IRCtx) switch_case(value: u64, target_bb_id: usize, next: *ir.SwitchCase): *ir.SwitchCase {
    let case = ctx.switch_case_arena.alloc() as *ir.SwitchCase;
    case.otherwise = false;
    case.value = value;
    case.target = target_bb_id;
    case.next = next;
    return case;
}

def (ctx: *IRCtx) declare_temp_var(typ: *ty.Type): memory.Local {
    let local = ctx.names.create_temp_var();
    if typ.kind == ty.TypeKind.Signature {
        typ = typ.data.signature.func;
    }
    ctx.current_function.body.add_local(local, typ);
    return local;
}

def (ctx: *IRCtx) declare_local(name: ident.Ident, typ: *ty.Type): memory.Local {
    let local = ctx.bind_local(name);
    // the actual type should not include the name/module of the function, since it could get
    // reassigned later
    if typ.kind == ty.TypeKind.Signature {
        typ = typ.data.signature.func;
    }
    ctx.current_function.body.add_local(local, typ);
    return local;
}

def (ctx: *IRCtx) bind_local(name: ident.Ident): memory.Local {
    return ctx.names.bind(name.as_view(), false);
}

def (ctx: *IRCtx) lookup_local(name: ident.Ident, out: *memory.Local): Result {
    return ctx.names.lookup(name.as_view(), out);
}

def (ctx: *IRCtx) open_scope() {
    ctx.names.open_scope();
}

def (ctx: *IRCtx) close_scope() {
    ctx.names.close_scope();
}

// replace escaped chars withing the string with the correct value (e.g. \n -> 10)
// this also manages the memory automatically for the caller
def (ctx: *IRCtx) unescape_string_literal(lit: str.View): str.View {
    let raw = escape.unescape_string(lit);
    let memory = ctx.string_literal_arena.alloc() as *StringLiteral;
    memory.value = raw;
    memory.next = ctx.string_literal_head;
    ctx.string_literal_head = memory;
    return memory.value.view();
}

def (ctx: *IRCtx) add_projection(
    tail: **memory.ProjectionNode,
    proj: memory.Projection
): **memory.ProjectionNode {
    let node = ctx.projection_arena.alloc() as *memory.ProjectionNode;
    node.value = proj;
    node.next = null;

    if *tail == null {
        *tail = node;
        return tail;
    }

    let tail = *tail;
    tail.next = node;
    return &tail.next;
}
