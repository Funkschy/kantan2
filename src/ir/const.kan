import ":std/str";
import ":std/dbg";

import ":cdeps";
import ":types/types" as ty;

import "ir";
import "compile/escape";

type ConstantKind enum {
    Null,
    Undefined,
    Char,
    Int,
    Float,
    String,
    Function // a function that is called by name, so the dispatch is known at compile time
}

type Constant struct {
    kind: ConstantKind,
    ty: *ty.Type,
    data: ConstantData
}

type ConstantData union {
    // null/undefined do not need any additional data
    char: i8,
    int: u64,
    float: f64,
    str: str.View,
    function: *ir.Function
}

def undef(ty: *ty.Type): Constant {
    return Constant {
        kind: ConstantKind.Undefined,
        ty: ty,
        data: undefined
    };
}

def nil(ty: *ty.Type): Constant {
    return Constant {
        kind: ConstantKind.Null,
        ty: ty,
        data: undefined
    };
}

def int(ty: *ty.Type, value: u64): Constant {
    return Constant {
        kind: ConstantKind.Int,
        ty: ty,
        data: ConstantData { int: value }
    };
}

def float(ty: *ty.Type, value: f64): Constant {
    return Constant {
        kind: ConstantKind.Float,
        ty: ty,
        data: ConstantData { float: value }
    };
}

def char(ty: *ty.Type, value: i8): Constant {
    return Constant {
        kind: ConstantKind.Char,
        ty: ty,
        data: ConstantData { char: value }
    };
}

def string_lit(ty: *ty.Type, value: str.View): Constant {
    return Constant {
        kind: ConstantKind.String,
        ty: ty,
        data: ConstantData { str: value }
    };
}

def function(function: *ir.Function): Constant {
    return Constant {
        kind: ConstantKind.Function,
        ty: function.ty,
        data: ConstantData { function: function }
    };
}

// json generation stuff

def (c: *Constant) to_json(): str.String {
    if c.kind == ConstantKind.Undefined {
        let json = str.from("{\"kind\": \"undefined\"");
        defer json.push(str.view("}", 1));
        return json;
    }

    if c.kind == ConstantKind.Null {
        let json = str.from("{\"kind\": \"null\"");
        defer json.push(str.view("}", 1));
        return json;
    }

    if c.kind == ConstantKind.Char {
        let json = str.from("{\"kind\": \"char\", \"value\": ");
        defer json.push(str.view("}", 1));

        let value = str.i64_to_string(c.data.char as i64);
        json.push(value.view());
        value.free();

        return json;
    }

    if c.kind == ConstantKind.Int {
        let json = str.from("{\"kind\": \"int\", \"value\": ");
        defer json.push(str.view("}", 1));

        let value = str.i64_to_string(c.data.int);
        json.push(value.view());
        value.free();

        return json;
    }

    if c.kind == ConstantKind.Float {
        let json = str.from("{\"kind\": \"float\", \"value\": ");
        defer json.push(str.view("}", 1));

        let value = cdeps.f64_to_string(c.data.float);
        json.push(value.view());
        value.free();

        return json;
    }

    if c.kind == ConstantKind.String {
        let json = str.from("{\"kind\": \"string\", \"value\": \"");
        defer json.push(str.view("\"}", 2));

        let escaped = escape.json_escape_string(c.data.str);
        json.push(escaped.view());
        escaped.free();

        return json;
    }

    if c.kind == ConstantKind.Function {
        let json = str.from("{\"kind\": \"function\"");
        defer json.push(str.view("}", 1));
        json.push(str.view_from(", \"name\": \""));
        json.push(c.data.function.original_name.as_view());
        json.push(str.view("\"", 1));
        return json;
    }

    dbg.assert(false, "unhandled constant kind");
    return undefined;
}
