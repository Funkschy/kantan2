import ":std/str";
import ":std/dbg";

import ":types/types" as ty;

import "ir";
import "memory";
import "const" as c;

type ExpressionKind enum {
    Use, Ref, Cast, Binary, Unary
}

type Expression struct {
    kind: ExpressionKind,
    data: ExpressionData
}

type ExpressionData union {
    use: Operand,
    ref: memory.Location,
    cast: Cast,
    unary: UnaryOperation,
    binary: BinaryOperation,
    null_value: *ty.Type,
    undef_value: *ty.Type
}

def expr_ref(location: memory.Location): Expression {
    return Expression {
        kind: ExpressionKind.Ref,
        data: ExpressionData { ref: location }
    };
}

def expr_copy(location: memory.Location): Expression {
    return expr_use(copy(location));
}

def expr_const(constant: c.Constant): Expression {
    return expr_use(const(constant));
}

def expr_use(operand: Operand): Expression {
    return Expression {
        kind: ExpressionKind.Use,
        data: ExpressionData { use: operand }
    };
}

def expr_unary(kind: UnaryKind, value: Operand): Expression {
    return Expression {
        kind: ExpressionKind.Unary,
        data: ExpressionData {
            unary: UnaryOperation {
                kind: kind,
                operand: value
            }
        }
    };
}

type OperandKind enum {
    Copy, Constant
}

type Operand struct {
    kind: OperandKind,
    data: OperandData
}

type OperandData union {
    copy: memory.Location,
    constant: c.Constant
}

def copy(location: memory.Location): Operand {
    return Operand {
        kind: OperandKind.Copy,
        data: OperandData { copy: location }
    };
}

def const(constant: c.Constant): Operand {
    return Operand {
        kind: OperandKind.Constant,
        data: OperandData { constant: constant }
    };
}

type OperandNode struct {
    value: Operand,
    next: *OperandNode
}

type CastKind enum {
    Pointer, Int
}

type Cast struct {
    kind: CastKind,
    operand: Operand,
    into: *ty.Type
}

type BinaryKind enum {
    Add = 1,
    Sub,
    Mul,
    Div,
    Mod,
    BitAnd,
    BitOr,
    BitXor,

    ST,
    SE,
    GT,
    GE,
    EQ,
    NE,

    BoolAnd,
    BoolOr,

    LShift,
    RShift,

    AddScalar,
    SubScalar
}

type BinaryOperation struct {
    kind: BinaryKind,
    left: Operand,
    right: Operand
}

type UnaryKind enum {
    Not = 1,
    NumNeg
}

type UnaryOperation struct {
    kind: UnaryKind,
    operand: Operand
}

// json generation stuff

def (e: *Expression) to_json(): str.String {
    if e.kind == ExpressionKind.Use {
        let json = str.from("{\"kind\": \"use\", \"operand\": ");
        defer json.push(str.view("}", 1));

        let operand = e.data.use.to_json();
        json.push(operand.view());
        operand.free();

        return json;
    }

    if e.kind == ExpressionKind.Ref {
        let json = str.from("{\"kind\": \"ref\", \"location\": ");
        defer json.push(str.view("}", 1));

        let location = e.data.ref.to_json();
        json.push(location.view());
        location.free();

        return json;
    }

    if e.kind == ExpressionKind.Unary {
        let unary = &e.data.unary;
        let json = str.from("{\"kind\": \"unary\", \"unary-kind\": ");
        defer json.push(str.view("}", 1));

        if unary.kind == UnaryKind.Not {
            json.push(str.view_from("\"not\""));
        } else if unary.kind == UnaryKind.NumNeg {
            json.push(str.view_from("\"negate\""));
        } else {
            dbg.assert(false, "unhandled unary kind");
        }

        json.push(str.view_from(", \"operand\": "));
        let operand = e.data.unary.operand.to_json();
        json.push(operand.view());
        operand.free();

        return json;
    }

    dbg.assert(false, "unhandled expression kind");
    return undefined;
}

def (op: *Operand) to_json(): str.String {
    let json = str.from("{\"kind\": ");
    defer json.push(str.view("}", 1));

    if op.kind == OperandKind.Copy {
        json.push(str.view_from("\"copy\", \"location\": "));
        let location = op.data.copy.to_json();
        json.push(location.view());
        location.free();
    } else {
        let c = &op.data.constant;
        json.push(str.view_from("\"constant\", \"type\": \""));
        let ty_s = c.ty.to_string();
        json.push(ty_s.view());
        ty_s.free();
        json.push(str.view_from("\", \"value\": "));
        let value = c.to_json();
        json.push(value.view());
        value.free();
    }

    return json;
}
