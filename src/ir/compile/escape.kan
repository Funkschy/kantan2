import ":std/str";
import ":std/libc";

def char_literal(c: i8): i8 {
    if c == '0' {
        return '\0';
    } else if c == 'n' {
        return '\n';
    } else if c == 'r' {
        return '\r';
    } else if c == 't' {
        return '\t';
    } else if c == '\\' {
        return '\\';
    } else if c == '"' {
        return '"';
    } else if c == '\'' {
        return '\'';
    }

    return c;
}

def json_escape_string(s: str.View): str.String {
    let escaped = str.from("");

    for let i: usize = 0; i < s.len; i += 1 {
        let c = s.at(i);
        if c == '\0' {
            // the string literal ends here
            return escaped;
        } else if c == '\n' {
            escaped.push(str.view_from("\\n"));
        } else if c == '\r' {
            escaped.push(str.view_from("\\r"));
        } else if c == '\t' {
            escaped.push(str.view_from("\\t"));
        } else if c == '\\' {
            escaped.push(str.view_from("\\\\"));
        } else if c == '"' {
            escaped.push(str.view_from("\\\""));
        } else if c == '\'' {
            escaped.push(str.view_from("\\'"));
        } else {
            escaped.push(str.view(&c, 1));
        }
    }

    return escaped;
}

def unescape_string(s: str.View): str.String {
    let value = libc.malloc(s.len + 1) as *i8;

    let actual_len: usize = 0;
    let out_pos: usize = 0;
    let in_pos: usize = 0;

    while in_pos < s.len {
        let c = s.at(in_pos);
        let inc: usize = 1;

        if c == '\\' {
            let next = s.at(in_pos + 1);
            c = char_literal(next);
            // no point in continuing, since we already encountered the \0
            if c == '\0' {
                break;
            }

            // skip next
            inc = 2;
        }

        actual_len += 1;
        *(value + out_pos) = c;
        in_pos += inc;
        out_pos += 1;
    }

    *(value + actual_len) = '\0';
    return str.move_l(value, actual_len);
}

