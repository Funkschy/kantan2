import ":std/dbg";

import ":util" as _;
import ":ast/item" as _;
import ":types/types" as ty;

import "../ir";
import "../const";
import "../rvalue";
import "../ctx" as _;

import "stmt";

def compile(ctx: *IRCtx, item: *Item): Result {
    if item.kind == ItemKind.FuncDef {
        let f = &item.data.func_def;
        let body = f.block();

        if f.sig.is_generic() {
            // TODO: this should be an assert for the instance length, since that should never be > 1,
            // however that would currently ruin a bunch of unrelated test cases
            return Result.OK;
        }

        dbg.assert(f.instances.len() == 1, "functions should only have one instance");

        let sig_ty = f.instances.get(0);
        dbg.assert(sig_ty.kind == ty.TypeKind.Signature, "expected signature");

        let func_ty = sig_ty.data.signature.func;
        ctx.set_current_function(item.name, sig_ty);
        ctx.open_scope();
        defer ctx.close_scope();

        // declare function parameters
        let param = func_ty.data.function.params_head;
        while param != null {
            dbg.assert(param.name.kind == ty.NameKind.Ident, "expected ident, not str.View");
            let name = param.name.data.ident;
            ctx.declare_local(name, param.value);
            param = param.next;
        }

        let had_errors = false;
        for let i: usize = 0; i < body.len(); i += 1 {
            had_errors |= stmt.compile(ctx, body.at(i)).is_error();
        }

        if had_errors {
            return Result.Error;
        }

        let empty_body = ctx.current_function.num_bbs() == 0;
        let current_bb = ctx.current_function.current_bb();
        let unfinished_bb = current_bb.terminator.kind == ir.TerminatorKind.Nop
                         && current_bb.statements.len > 0;

        // if the last bb is empty, it should only have no terminator if we also return void
        // it's a compiler error otherwise
        if empty_body || unfinished_bb {
            let func_ty = &f.instances.get(0).data.signature.func.data.function;
            dbg.assert(
                func_ty.ret.kind == ty.TypeKind.Void,
                "only functions which return nothing should have a nop terminator at this point"
            );

            let value = rvalue.const(const.nothing(func_ty.ret));
            let ret = ir.ret(value);
            ctx.push_terminator(&ret);
        }

        return Result.OK;
    }

    dbg.assert(false, "Unhandled ItemKind");
    return Result.Error;
}
