import ":std/dbg";

import ":util" as _;
import ":ast/expr" as _;
import ":types/types" as ty;

import "../ir";
import "../const";
import "../rvalue";
import "../memory";
import "../ctx" as _;

import "call";
import "literal";

type CompileResult struct {
    is_error: bool,
    value: rvalue.Expression
}

def ok(value: rvalue.Expression): CompileResult {
    return CompileResult { is_error: false, value: value };
}

def error(): CompileResult {
    return CompileResult { is_error: true, value: undefined };
}

type ResultFormat enum {
    RValue, // any rvalue
    Location // a location in memory. Might create a temporary variable
}

def compile(ctx: *IRCtx, expr: *Expr): CompileResult {
    return compile_fmt(ctx, expr, ResultFormat.RValue);
}

def copy_if_needed(location: memory.Location, format: ResultFormat): CompileResult {
    if format == ResultFormat.RValue {
        return ok(rvalue.expr_copy(location));
    }

    return ok(rvalue.expr_ref(location));
}

def make_temp_if_needed(
    ctx: *IRCtx,
    value: rvalue.Expression,
    ty: *ty.Type,
    format: ResultFormat
): CompileResult {
    if format == ResultFormat.RValue {
        return ok(value);
    }

    let temp = ctx.declare_temp_var(ty).as_location();
    let assign = ir.assign(temp, value);
    ctx.push_stmt(&assign);

    return ok(rvalue.expr_ref(temp));
}

def as_operand(ctx: *IRCtx, value: rvalue.Expression, ty: *ty.Type): rvalue.Operand {
    if value.kind == rvalue.ExpressionKind.Use {
        return value.data.use;
    }

    let result = make_temp_if_needed(ctx, value, ty, ResultFormat.Location);
    dbg.assert(!result.is_error, "somehow returned impossible error");
    let location = result.value.data.ref;
    return rvalue.copy(location);
}

def compile_fmt(ctx: *IRCtx, expr: *Expr, format: ResultFormat): CompileResult {
    if expr.kind == ExprKind.Literal {
        return literal.compile_fmt(ctx, expr, format);
    }

    if expr.kind == ExprKind.Assign {
        return compile_assign(ctx, expr.data.assign.left, expr.data.assign.right, format);
    }

    if expr.kind == ExprKind.Ident {
        let name = expr.data.ident.name;

        if expr.ty.kind == ty.TypeKind.Signature {
            let function = const.function(expr.ty);
            return make_temp_if_needed(ctx, rvalue.expr_const(function), expr.ty, format);
        }

        let local: memory.Local = undefined;
        if ctx.lookup_local(name, &local).is_error() {
            dbg.assert(false, "undeclared name");
            return error();
        }

        return copy_if_needed(local.as_location(), format);
    }

    if expr.kind == ExprKind.Access {
        return compile_access(ctx, expr, format);
    }

    if expr.kind == ExprKind.Call {
        return call.compile_fmt(ctx, expr, format);
    }

    if expr.kind == ExprKind.Binary {
        return compile_binary(ctx, expr, format);
    }

    if expr.kind == ExprKind.Unary {
        return compile_unary(ctx, expr, format);
    }

    if expr.kind == ExprKind.Sizeof {
        let value = const.int(expr.ty, expr.data.size_of.resolved.width.bytes());
        return make_temp_if_needed(ctx, rvalue.expr_const(value), expr.ty, format);
    }

    dbg.assert(false, "Unhandled ExprKind");
    return error();
}

def compile_access(ctx: *IRCtx, expr: *Expr, format: ResultFormat): CompileResult {
    let left = expr.data.access.left;
    let right = expr.data.access.ident;

    if left.ty.kind == ty.TypeKind.Module {
        if right.ty.kind == ty.TypeKind.Signature {
            let function = const.function(expr.ty);
            return make_temp_if_needed(ctx, rvalue.expr_const(function), expr.ty, format);
        }
    }

    dbg.assert(false, "Unhandled Access kind");
    return error();
}

def compile_unary(ctx: *IRCtx, expr: *Expr, format: ResultFormat): CompileResult {
    let unary = &expr.data.unary;

    if unary.kind == UnaryKind.Deref || unary.kind == UnaryKind.AddrOf {
        let location = compile_fmt(ctx, unary.right, ResultFormat.Location);
        if location.is_error {
            return location;
        }
        dbg.assert(location.value.kind == rvalue.ExpressionKind.Ref, "compile_fmt ignored format");
        let location = location.value.data.ref;

        if unary.kind == UnaryKind.Deref {
            ctx.add_projection(&location.projection_head, memory.deref());
            return copy_if_needed(location, format);
        }

        if unary.kind == UnaryKind.AddrOf {
            return make_temp_if_needed(ctx, rvalue.expr_ref(location), expr.ty, format);
        }
    }

    let result = compile(ctx, unary.right);
    if result.is_error {
        return result;
    }

    let operand = as_operand(ctx, result.value, unary.right.ty);

    if unary.kind == UnaryKind.NumNegate {
        let negated = rvalue.expr_unary(rvalue.UnaryKind.NumNeg, operand);
        return make_temp_if_needed(ctx, negated, expr.ty, format);
    }

    if unary.kind == UnaryKind.BoolNegate {
        let negated = rvalue.expr_unary(rvalue.UnaryKind.Not, operand);
        return make_temp_if_needed(ctx, negated, expr.ty, format);
    }

    // for some reason the compiler cannot compile this correctly if i write
    // if unary.kind == UnaryKind.BoolNegate || unary.kind == UnaryKind.BitNegate
    // that assigns null to unary, which seems to be a weird bug in the current compiler
    if unary.kind == UnaryKind.BitNegate {
        let negated = rvalue.expr_unary(rvalue.UnaryKind.Not, operand);
        return make_temp_if_needed(ctx, negated, expr.ty, format);
    }

    dbg.assert(false, "Unhandled UnaryKind");
    return error();
}

def compile_binary(ctx: *IRCtx, expr: *Expr, format: ResultFormat): CompileResult {
    let binary = &expr.data.binary;
    let left = compile(ctx, binary.left);
    if left.is_error {
        return left;
    }
    let left = as_operand(ctx, left.value, binary.left.ty);

    let right = compile(ctx, binary.right);
    if right.is_error {
        return right;
    }
    let right = as_operand(ctx, right.value, binary.right.ty);

    let short_circuit = ShortCircuitKind.None;
    let kind = binary_ast_to_ir(binary, &short_circuit);

    // in the case of scalar addition/subtraction, the scalar should always be the right operand
    if kind == rvalue.BinaryKind.AddScalar || kind == rvalue.BinaryKind.SubScalar {
        if binary.right.ty.is_pointer() {
            // swap left and right to ensure the constraint
            let temp = left;
            left = right;
            right = temp;
        }
    }

    let binary_expr = rvalue.expr_binary(kind, left, right);
    return make_temp_if_needed(ctx, binary_expr, expr.ty, format);
}

type ShortCircuitKind enum {
    None, And, Or
}

def binary_ast_to_ir(binary: *BinaryExpr, short_circuit: *ShortCircuitKind): rvalue.BinaryKind {
    let k = binary.kind;
    let left = binary.left;
    let right = binary.right;

    // the binary kinds for ast and mir only differ for the scalar addition
    // and subtraction...
    if k == BinaryKind.Add {
        // the following combinations are possible:
        // left | right
        //  num |  num
        //  int |  ptr
        //  ptr |  int

        if left.ty.kind == right.ty.kind {
            return rvalue.BinaryKind.Add;
        }

        return rvalue.BinaryKind.AddScalar;
    } else if k == BinaryKind.Sub {
        // the following combinations are possible:
        // left | right
        //  num |  num
        //  int |  ptr
        //  ptr |  int
        //  ptr |  ptr   <- this is not allowed for addtion

        if left.ty.kind == right.ty.kind {
            return rvalue.BinaryKind.Sub;
        }

        return rvalue.BinaryKind.SubScalar;
    }

    // TODO: implement short circuiting (and logical operators in general)
    // if k == BinaryKind.LogAnd {
    //     *short_circuit = ShortCircuitKind.And;
    // } else if k == BinaryKind.LogOr {
    //     *short_circuit = ShortCircuitKind.Or;
    // }

    // ...everything else is identical
    return *(&k as *rvalue.BinaryKind);
}

// TODO: handle different assignment kinds
def compile_assign(ctx: *IRCtx, left: *Expr, right: *Expr, format: ResultFormat): CompileResult {
    // try to get the destination location for this assignment
    let dest = compile_fmt(ctx, left, ResultFormat.Location);
    if dest.is_error {
        return dest;
    }

    let dest = dest.value;
    dbg.assert(dest.kind == rvalue.ExpressionKind.Ref, "compile_fmt ignored format");
    let dest_location = dest.data.ref;

    let value = compile(ctx, right);
    if value.is_error {
        return value;
    }

    let value = value.value;
    let assign = ir.assign(dest_location, value);
    ctx.push_stmt(&assign);

    // since assignments are expressions in kantan, we need to return either the location or the
    // value of the result of the assignment
    if format == ResultFormat.Location {
        // since we just assigned the value to dest, we can just return dest
        return ok(dest);
    }

    // if the caller wants a proper rvalue, we just copy the value out of the memory location
    // where we just wrote the value
    let op = rvalue.copy(dest_location);
    return ok(rvalue.expr_use(op));
}
