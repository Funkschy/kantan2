import ":std/dbg";
import ":ast/expr" as _;

import "../ir";
import "../rvalue";
import "../ctx" as _;

import "expr" as super;

def compile_fmt(ctx: *IRCtx, expr: *Expr, format: super.ResultFormat): super.CompileResult {
    let call_expr = &expr.data.call;
    let callee = super.compile(ctx, call_expr.callee);
    if callee.is_error {
        return callee;
    }

    let callee = callee.value;
    dbg.assert(
        callee.kind == rvalue.ExpressionKind.Ref || callee.kind == rvalue.ExpressionKind.Use,
        "compile_fmt ignored format"
    );

    let callee_op = super.as_operand(ctx, callee, call_expr.callee.ty);

    let arg_operand: *rvalue.OperandNode = null;
    for let arg = call_expr.args_head; arg != null; arg = arg.next {
        let result = super.compile(ctx, &arg.value);
        if result.is_error {
            return result;
        }

        let op = super.as_operand(ctx, result.value, arg.value.ty);
        arg_operand = ctx.alloc_op_node(op, arg_operand);
    }

    let dest = ctx.declare_temp_var(expr.ty).as_location();
    let call = ir.call(callee_op, call_expr.num_args, arg_operand, dest);
    ctx.push_terminator(&call);

    if format == super.ResultFormat.RValue {
        return super.ok(rvalue.expr_copy(dest));
    }

    return super.ok(rvalue.expr_ref(dest));
}
