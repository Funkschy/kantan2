import "../std/dbg";
import "../std/str";

type Arch enum {
    X86_64, Wasm32
}

type Vendor enum {
    None, Unknown, PC, Apple
}

type Sys enum {
    None, Linux, Darwin, Win32
}

type Abi enum {
    None, Empty, Gnu, Msvc
}

def (a: Arch) to_string(): str.String {
    if a == Arch.X86_64 {
        return str.from("x86_64");
    }
    if a == Arch.Wasm32 {
        return str.from("wasm32");
    }
    return str.from("");
}

def (a: Arch) register() {
    if a == Arch.X86_64 {
        // llvm.initialize_x86_target_info();
        // llvm.initialize_x86_target();
        // llvm.initialize_x86_target_mc();
        // llvm.initialize_x86_asm_printer();
        return;
    }

    if a == Arch.Wasm32 {
        // llvm.initialize_web_assembly_target_info();
        // llvm.initialize_web_assembly_target();
        // llvm.initialize_web_assembly_target_mc();
        // llvm.initialize_web_assembly_asm_printer();
        return;
    }

    dbg.assert_fmt(0 == 1, "unknown target architecture: %d", a);
}

def (a: Arch) pointer_width_bits(): u32 {
    if a == Arch.X86_64 {
        return 64;
    }
    return 32;
}

def (v: Vendor) to_string(): str.String {
    if v == Vendor.Unknown {
        return str.from("unknown");
    }
    if v == Vendor.PC {
        return str.from("pc");
    }
    if v == Vendor.Apple {
        return str.from("apple");
    }

    return str.from("");
}

def (s: Sys) to_string(): str.String {
    if s == Sys.Linux {
        return str.from("linux");
    }
    if s == Sys.Darwin {
        return str.from("darwin");
    }
    if s == Sys.Win32 {
        return str.from("win32");
    }

    return str.from("");
}

def (a: Abi) to_string(): str.String {
    if a == Abi.Gnu {
        return str.from("gnu");
    }
    if a == Abi.Msvc {
        return str.from("msvc");
    }

    return str.from("");
}
